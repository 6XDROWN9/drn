<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <!-- Latest compiled and minified CSS -->
    <!--
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
-->
    <!--Import Google Icon Font-->
    <link href="//fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <link href="//fonts.googleapis.com/css?family=Ubuntu" rel="stylesheet">

    <!-- Compiled and minified CSS -->
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">

    <link rel="stylesheet" href="css/main.css">

    <!-- Font Awesome -->
    <script src="//use.fontawesome.com/811ca3dd9f.js"></script>

    <!-- jQuery library -->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

    <!-- Latest compiled JavaScript -->
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.19.3/moment.min.js"></script>

    <!-- Compiled and minified JavaScript -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>

    <!-- Misc Scripts -->
    <script src="js/scripts.js"></script>

    <!-- Fonts -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- OpenGraph -->
    <title>blargbot</title>

    <link rel="icon" type="image/png" href="/img/blargbotmini.png">

    <meta name="author" content="stupid cat">

    <meta content="A multipurpose discord bot, here to serve you!" property="og:description">

    <meta content="blargbot" property="og:title">
    <meta content="blargbot" property="og:site_name">
    <meta content='http://blargbot.xyz/img/blargbot.png' property='og:image'>
    <meta content='https://blargbot.xyz/img/blargbot.png' property='og:image:secure_url'>
    <meta content='image/png' property='og:image:type'>
    <meta content='512' property='og:image:width'>
    <meta content='512' property='og:image:height'>

</head>

<body class="blue-grey">
    {{> sidebar}}

    <a class="btn-floating btn-primary button-collapse btn-large waves-effects waves-light" data-activates="slide-out">
		<i class="large material-icons">menu</i></a>

    <header class="page-header">
        <h1 class="centre">Shard Status</h1>
    </header>
    <main>
        <h2 class='centre'>Clusters</h2>
        <div id='cluster-container'>

        </div>
        <h2 class='centre'>Shards</h2>
        <div id='shard-container'>

        </div>
    </main>
    <footer class="page-footer blue-grey darken-2">
        <div class="section">
            <div class="rows">
                <div class="col s12 m10 offset-m1 l6 offset-l3">
                    <p class="centre">
                        &copy; 2016 - Ratismal (stupid cat)
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <style>
        .shard.connected,
        .shard.ready {
            border-color: #3ead42;
        }

        .shard.connecting {
            border-color: #c4bf5a;
        }

        .shard.disconnecting {
            border-color: #846709;
        }

        .shard.handshaking {
            border-color: #291675;
        }

        .shard.unresponsive {
            border-color: #590414;
        }

        .label {
            text-align: right;
        }

        .col {
            margin: 1px 0;
        }

        .shard,
        .cluster {
            flex: 0 0 400px;
            background: #37474f;
            margin: 15px;
            padding: 10px;
            border-radius: 5px;
            border-top: solid 7px;

            transition: border-color 1s;
        }

        .cluster {
            border: none;
        }

        .shard h3,
        .cluster h3 {
            margin: 0 0 10px 0;
            text-align: center;
            display: block;
            border-bottom: rgba(255, 255, 255, 0.3) 1px solid;

        }

        #shard-container,
        #cluster-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
    </style>

    <!-- Menu Toggle Script -->
    <script>
init();
let ws = new WebSocket('{{url}}');
let shardContainer = document.getElementById('shard-container');
let clusterContainer = document.getElementById('cluster-container');
let shards = {};
let clusters = {};

function clearElement(n) {
    while (n.hasChildNodes())
        n.removeChild(n.lastChild);
}

function refreshContainer() {
    clearElement(clusterContainer);
    for (let i of Object.keys(clusters).sort((a,b) => parseInt(a) - parseInt(b))) {
        clusterContainer.appendChild(clusters[i].element);
    }
    clearElement(shardContainer);
    for (let i of Object.keys(shards).sort((a,b) => parseInt(a) - parseInt(b))) {
        shardContainer.appendChild(shards[i].element);
    }
    
}

function setProperty(el, shard, label, key) {
    let lab = document.createElement('div');
    lab.classList.add('col', 's6', 'label');
    lab.innerText = label;
    el.appendChild(lab);
    let dyn = document.createElement('code');
    dyn.classList.add('col', 's6');
    el.appendChild(dyn);
    shard.components[key] = dyn;
}

function updateCluster(s) {
    if (!clusters[s.id]) {
        let el = document.createElement('div');
        el.classList.add('cluster');
        el.id = `cluster${s.id}`;
        clusters[s.id] = {element: el, components:{}};
        let c = clusters[s.id].components;

        c.head = document.createElement('h3');
        c.head.innerText = 'cluster ' + s.id;
        el.appendChild(c.head);

        let container = document.createElement('div');
        container.className = 'row';
        el.appendChild(container);

        setProperty(container, clusters[s.id], 'Guilds: ', 'guilds');
        setProperty(container, clusters[s.id], 'Memory: ', 'memory');
        setProperty(container, clusters[s.id], 'CPU: ', 'cpu');
        setProperty(container, clusters[s.id], 'Uptime: ', 'uptime');
        setProperty(container, clusters[s.id], 'Last Update: ', 'lastResponse');
        setProperty(container, clusters[s.id], 'Shards: ', 'shards');
        refreshContainer();
    }
    for (const shard of s.shards)
        updateShard(shard);
    Object.assign(clusters[s.id], s);
    let c = clusters[s.id].components;
    clusters[s.id].element.className = 'cluster ' + clusters[s.id].status;

    c.guilds.innerText = clusters[s.id].guilds;
    c.memory.innerText = clusters[s.id].rss ? formatBytes(clusters[s.id].rss) : 'NaN';
    if (typeof clusters[s.id].cpu === 'number')
     clusters[s.id].cpu = Math.round(clusters[s.id].cpu * 10) / 10;
    c.cpu.innerText = (clusters[s.id].cpu || 'NaN') + '%';
    c.shards.innerText = clusters[s.id].shardCount;
    c.uptime.innerText = clusters[s.id].readyTime === 0 ? 'Starting...' : moment.duration(moment() - clusters[s.id].readyTime).toISOString();
    c.lastResponse.innerText = moment(clusters[s.id].time).format('LTS');
}

function updateShard(s) {
    if (!shards[s.id]) {
        let el = document.createElement('div');
        el.classList.add('shard');
        el.id = `shard${s.id}`;
        shards[s.id] = {element: el, components:{}};
        let c = shards[s.id].components;

        c.head = document.createElement('h3');
        c.head.innerText = 'Shard ' + s.id;
        el.appendChild(c.head);

        let container = document.createElement('div');
        container.className = 'row';
        el.appendChild(container);

        setProperty(container, shards[s.id], 'Guilds: ', 'guilds');
        setProperty(container, shards[s.id], 'Latency: ', 'latency');
        setProperty(container, shards[s.id], 'Last Update: ', 'lastResponse');
        setProperty(container, shards[s.id], 'Cluster: ', 'cluster');
        refreshContainer();
    }
    Object.assign(shards[s.id], s);
    let c = shards[s.id].components;
    shards[s.id].element.className = 'shard ' + shards[s.id].status;

    c.guilds.innerText = shards[s.id].guilds;
    c.latency.innerText = shards[s.id].latency + 'ms';
    console.log(shards[s.id]);
    c.lastResponse.innerText = moment(shards[s.id].time).format('LTS')
    c.cluster.innerText = shards[s.id].cluster;
}

function formatBytes(a,b){if(0==a)return"0 Bytes";var c=1024,d=b||2,e=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],f=Math.floor(Math.log(a)/Math.log(c));return parseFloat((a/Math.pow(c,f)).toFixed(d))+" "+e[f]}


setInterval(() => {
    for (const shard of Object.values(shards)) {
        let diff = Date.now() - shard.time;
        if (diff > 30000) {
            updateShard({
                id: shard.id,
                status: 'unresponsive',
                guilds: NaN,
                rss: NaN,
                readyTime: NaN,
                latency: NaN
            })
        }
    }
}, 1000);

ws.onopen = () => {
    ws.send(JSON.stringify({type: 'requestShards'}));
}

ws.onmessage = event => {
    let data = JSON.parse(event.data);
    switch (data.code) {
        case 'shard':
            updateCluster(data.data);
            break;
    }
};
    </script>

</body>

</html>
{
    "language": "English",
    "header": {
        "login": "Login",
        "logout": "Logout",
        "commands": "Commands",
        "bbtag": "BBTag",
        "subtags": "SubTags"
    },
    "index": {
        "desc": "blargbot is a multipurpose Discord bot dedicated to providing quality commands and services, including chatlogs and an in-depth custom command system.",
        "commands": {
            "title": "Commands",
            "desc": "blargbot is equipped with numerous commands, all of which are documented and categorized for your convenience."
        },
        "bbtag": {
            "title": "BBTag",
            "desc": "blargbot uses a sophisticated tag system called BBTag, which you can use to create advanced custom commands."
        },
        "customization": {
            "title": "Customization",
            "desc": "We understand that not every guild is the same, so blargbot has extensive customization. You can control exactly which roles can use which commands, specify custom prefixes, and even change the display language!"
        },
        "moderation": {
            "title": "Moderation",
            "desc": "Need something to moderate your chat? blargbot is equipped with many moderation utilities, from basic operations like banning and muting, to more advanced stuff like chatlogging or automatic censoring."
        },
        "opensource": {
            "title": "Open-Source",
            "desc": "Sharing is caring! blargbot is completely open-source under the GNU AGPLv3 License. Feel free to take a look and learn how everything works. If you use any of my code in your own project, you are required to credit me. See the license for more details."
        },
        "suggestions": {
            "title": "Open To Suggestions",
            "desc": "Have a suggestion for the bot? I would be glad to hear it! Found a bug? I'd like to hear that too! You can suggest anything to me using the `suggest` command, by joining my guild, or by submitting a ticket."
        }
    },
    "bbtag": {
        "main": "# BBTag\n> Not to be confused with BBCode!\n\nBBTag is a template-based programming language, designed to provide a powerful framework to create advanced custom commands.\n\n### Terminology\n\n- A `tag` refers to a block of BBTag code, whether it be a public tag or a custom command.\n- A `subtag` refers to a BBTag component. Advanced `tags` are made of many `subtags`.\n- A `class` refers to a group of `subtags`.",
        "subtags": {
            "title": "SubTags",
            "desc": "## SubTags\n\nSubtags are the basic building block of BBTag. They perform dynamic functions, whether it be getting the name of a user or doing math. Let's take a look at a subtag now:\n```\n{math.randint;1;10}\n```\nWhen run, this may return something like this:\n```\n6\n```\nAs you can see, the `math.randint` subtag returns a random integer between the provided range.\n\n### Anatomy of a SubTag\n\nA subtag is made of various components. A syntax diagram may look something like this:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nOh wow, ok. That's kinda confusing, but bear with me!\n\n#### Classes\n\n> `[class.]name`\n\nSubtags are split into groups, called **classes**. Each class is designated a specific type of purpose. For example, the `math` class would contain subtags that deal with numbers. Likewise, the `user` class would contain subtags that give information about users. Classes provide a system of organization.\n\nWhen using a subtag, the preferred usage would be `{class.name}`. This improves readability. However, explicitly stating the class is usually optional. BBTag knows that `{math.randint}` and `{randint}` are the same subtag. This is called **implicit classing**. The exception to this are subtags in the `general` class, which should be used *without* an explicit class.\n\nHowever, you should be careful with implicit classing! Sometimes, classes may have subtags with the same name. For example, `{user.id}` and `{channel.id}` both have subtags with the name `id`. If you attempt to use implicit classing with a subtag that exists in multiple classes, it will return an error!\n\n#### Piping\n\n> `[![var]]`\n\nPiping is a feature that allows you to redirect the output of a subtag, either to a variable or into a void. This can help to clean up your code.\n\nFor example, if for whatever reason you don't want a subtag to output anything, you can add a `!` after the subtag name to silence it. The following lines are equivalent:\n```\n{void;{math.randint;1;10}}\n{math.randint!;1;10}\n```\nIf you want to store the subtag's output to a variable, you can add `!variableName` after the subtag name. The following lines are equivalent:\n```\n{set;randomInteger;{math.randint;1;10}}\n{math.randint!randomInteger;1;10}\n```\nPiping output is slightly faster to execute than using the full syntax.\n\n#### Arguments\n\n> `[;args]...`\n\nYou can pass parameters into subtags. These are separated by semicolons `;`. Arguments are different per-subtag, and documentation on these can be found on the subtag page.\n\n##### Named Arguments\n\n> `=<namedArgs>...`\n\nNormally, the order of provided arguments is very important. However, you can use the named counterparts instead. This is done by using the `=` token instead of a semicolon, and then specifying key-value tags, in the format of `{*key;value}`.\n\nFor example, the usage of `{math.randint}` is `{math.randint;min;max}`. The names of the arguments are `min` and `max` respectively. The following usages are equivalent:\n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nYou cannot use both named arguments and ordered arguments in the same subtag."
        },
        "variables": {
            "title": "Variables",
            "desc": "## Variables\n\nBBTag features several different types of variables, each with a different scope. These variables can be used for numerous operations and functions.\n\n### Names\n\nA variable name is made of two parts: a `prefix` and a `name`. Here's a syntax diagram:\n\n> `[prefix]name`\n\nSimple, right?\n\n### Scopes\n\nA **scope** refers to where you can access a variable from, and how long they last. Knowing what scope to use can greatly help in creating your tag!\n\nAnother way of looking at scopes is the location of where they are *stored*. For example, local variables are stored to the tag itself, whereas author variables are stored to the user who created the tag.\n\nLet's go through all the different scopes, in order from smallest to largest.\n\n#### **Temporary** Scope\n> Unprefixed\n\nTemporary variables are the most-basic and most-used variables, as they have the smallest scope. These variables are *never stored in the database*, and cease to exist after the tag has finished executing. As such, they are the fastest to use.\n\nUse temporary variables for things that don't need to be persistent between uses.\n\n#### **Local** Scope\n> Prefix: `~`\n\nLocal variables can only be accessed by the tag that created them. They perform nearly identically to temporary variables, except that they persist between uses.\n\nLocal variables are stored directly to the tag itself.\n\n#### **Guild** Scope\n> Prefix: `_`\n\nGuild variables can only be accessed in the guild from which they were created. They are most suitable for custom commands, as any custom command on a guild shares the same variable pool regardless of author.\n\nIt should be noted that public tags and custom commands *do not* share the same guild scope, so random tags can't tamper with custom command data.\n\nGuild variables are stored to the guild that the tag was executed on.\n\n#### **Author** Scope\n\nAuthor variables can only be accessed from any other tag that shares the same author. They are most suitable for public tags. This means that it is essentially a personal variable pool that you can use for all your tags. \n\nAuthor variables are stored to the user who created the tag.\n\n#### **Shared** Scope\n**NOTE**: Not yet implemented.\n> Prefix: `&<name>&`\n\nShared variables are more complicated. They operate based on dynamic variable pools, which assigned to specific tag clusters. The intended purpose of shared variables is for multiple users to collaborate on different tags, while sharing the same variables.\n\nThe specific use case is as follows:\n1. Multiple users create different tags\n2. One of the users creates a tag cluster with a specific name (ex. `test`)\n3. This user then adds each of the created tags to the cluster\n4. Each tag is then able to access the cluster's variable pool by using the cluster's name as a prefix (ex. `&test&`)\n\nSo, in this example, the shared variable `apple` would be accessed with the full name `&test&apple`."
        },
        "arrays": {
            "title": "Arrays",
            "desc": "## Arrays\n\nArrays are a super useful data structure. In it's essence, an array is a list of items. They are used similarly to subtags, with square brackets `[]` instead of curly braces `[]`.\n\nThere are several subtags dedicated to using and manipulating arrays. See the `Array` class for more details.\n\n#### Syntax\n> `[item;item;item]`\n\n#### Indexes\n\nArrays are ordered. Each element in an array is assigned an **index**, which is basically the position of the element within the array.\n\nThe most important thing to know about arrays is that they're **0-indexed**. This means that indexes start at 0 instead of 1. Let's take a look at this sample array:\n```\n Index:  0 1 2 3 4\n-------------------\nValues: [1;2;3;4;5]\n```\nThe first element, `1`, has an index of `0`. Likewise, the fourth element `4` has an index of `3`. This may be seem tricky at first, but it's simple once you get used to it."
        }
    }
}
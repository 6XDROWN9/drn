{
    "specs": {
        "lang": "English (Verbose)",
        "contributors": [
            "103347843934212096"
        ]
    },
    "comments": [
        "This is a MEME LOCALE for blargbot. Theme: Verbose",
        "For contribution, please use the following guidelines:",
        "1. Arguments are passed into templates using {{name}}. Do not modify these.",
        "2. Templates are used in templates by using [[path.to.key]]. Do not modify these.",
        "3. All commands must contain an 'info' and 'usage' property.",
        "4. For random outputs, terms are placed in a '.list' context. Each random output is specified on a new line. You may contribute random outputs as needed.",
        "5. Terms should end with the same punctuation as in the en_US reference.",
        "6. For credit, put your Discord ID (or desired name) on a new line in the `contributors` term. IDs will get parsed to whatever your username/discrim are.",
        "7. Keep translations overly verbose.",
        "Thank you!"
    ],
    "generic": {
        "output": "The result of the requested operation can be referenced by reading the following characters:\n{{output}}",
        "nooutput": "Unfortunately the requested operation did not yield any result, textual or otherwise.",
        "queryexpire": "The query that you have submitted is due to expire in approximately {{length}} of the units of time referred to as \"minutes\" in the English language , consisting of 60 \"seconds\" per minute, while each \"second\" consists of 1000 \"milliseconds\", and a \"millisecond\" is a very short span of chronological duration.",
        "resolveuser": {
            "nousers": "I was unable to locate a user from the textual input query that you, the user, have provided through the binary medium of the internet.",
            "pickuser": "By using the textual input query that you provided, I have eliminated the extraneous results and have compiled a list of {{length}} users for you to peruse. I would appreciate it if you would be willing to select which user you would like by clicking or tapping one of the buttons below."
        },
        "resolverole": {
            "noroles": "I was unable to locate a role from the textual input query that you, the user, have provided through the binary medium of the internet.",
            "pickrole": "By using the textual input query that you provided, I have eliminated the extraneous results and have compiled a list of {{length}} roles for you to peruse. I would appreciate it if you would be willing to select which user you would like by clicking or tapping one of the buttons below."
        },
        "resolvechannel": {
            "nochannels": "I was unable to locate a channel from the textual input query that you, the user, have provided through the binary medium of the internet.",
            "pickchannel": "By using the textual input query that you provided, I have eliminated the extraneous results and have compiled a list of {{length}} channels for you to peruse. I would appreciate it if you would be willing to select which user you would like by clicking or tapping one of the buttons below."
        },
        "edited": "was modified in a way in that the content now differs in some way from the original",
        "created": "was constructed using the provided input and then inserted into a storage medium",
        "deleted": "was unreferenced in all available storage mediums and now, for all intents and purposes, does not exist",
        "menu": {
            "choices": "Page {{page}}/{{max}}"
        },
        "nochange": "After much deliberation and processing, all the changes you have proposed have been considered and implemented using our fabled and thorough 0-step process. That is to say, no procedural event has actually occurred.",
        "commandhelp": "**Command Name**: **__{{name}}__**\n\n**__Usage__**\n```{{usage}}```\n**__Info__**\n{{info}}\n\n**__Aliases__**\n{{aliases}}",
        "example": {
            "id1": "111111111111111111",
            "id2": "222222222222222222",
            "id3": "333333333333333333"
        },
        "test": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
    },
    "menu": {
        "cancel": {
            "name": "Abrogate",
            "description": "Relay an electronic signal to my processors as an indicator that you no longer wish to proceed with this operation,"
        },
        "confirm": {
            "name": "Affirm",
            "description": "Signify that you are satisfied with your current selection(s) and wish to proceed."
        }
    },
    "emote": {
        "check": ":white_check_mark:",
        "x": ":x:",
        "okhand": ":ok_hand:"
    },
    "error": {
        "keyundef": "Unfortunately I was unable to ascertain an internal locale key of: '{{key}}'.",
        "memberundef": "Unfortunately I was unable to ascertain to which member the query '{{member}}' was supposed to relate to.",
        "userundef": "Unfortunately I was unable to ascertain to which user the query '{{user}}' was supposed to relate to.",
        "channelundef": "Unfortunately I was unable to ascertain to which channel the query '{{channel}}' was supposed to relate to.",
        "roleundef": "Unfortunately I was unable to ascertain to which role the query '{{role}}' was supposed to relate to.",
        "pleasereport": "If you have sufficiently mulled over this conundrum and have come to a hypothesis/solution that this is indeed an erroneous and unexpected result to your actions, you are greatly encouraged to report this incident.",
        "generic": "There was an erroneous transaction that forced the proceedings to conclude early.\n```\n{{message}}\n```\n[[error.pleasereport]]",
        "messagetoolong": "I am embarrassed to admit that the resulting output that I attempted to deliver to you was beyond my meager capabilities, as the number of linguistic characters (not to be confused with characters that constitute as people, but rather those of a more unicode variation) far surpassed my limit of 2000. [[error.pleasereport]]",
        "notenoughparams": "Not enough parameters! Do `{{prefix}}help {{name}}` for more details.\n\nExpected `{{expected}}` parameters, but got `{{received}}` instead.",
        "tag": {
            "notfound": "I regret to inform you in this textual tag error that the subtag '{{tag}}' that you attempted to execute is not currently in existence",
            "toomanyargs": "I regret to inform you in this textual tag error that too many arguments were provided, and while the effort is very much appreciated it is simply not feasible (r:{{received}} e:{{expected}})",
            "toofewargs": "I regret to inform you in this textual tag error that you simply did not provide enough arguments and thus execution is simply infeasible at this moment (r:{{received}} e:{{expected}})",
            "isnan": "I regret to inform you in this textual tag error that you have provided the faulty, malformed, or invalid value '{{value}}' as the '{{arg}}' argument when the proper format is a numeric value",
            "maxlessthanmin": "I regret to inform you in this textual tag error that you provided a Maximum value that was lower than the Minimum value which is quite logically unsound",
            "ccommandonly": "I regret to inform you in this textual tag error that the subtag that you attempted to execute, '{{tag}}', is only available in custom commands due to the dangerous effects that it may impart as a public tag",
            "authorstaff": "I regret to inform you in this textual tag error that in order to execute the subtag '{{tag}}', the author of this custom command must be staff on the current guild as part of a safety precaution",
            "noperms": "I regret to inform you in this textual tag error that in order to execute the subtag '{{tag}}' I require the permission '{{perm}}', but this permission was not available for my use",
            "toolow": "I regret to inform you in this textual tag error that, and though this is rather embarrassing to admit, I am actually lower ranked than '{{target}}' and thus I am unable to execute the '{{tag}}' tag on them",
            "unclosed": "I regret to inform you in this textual tag error that you have an unmatched opening brace at the coordinates x={{column}}, y{{row}}, and thus execution was impossible",
            "unopened": "I regret to inform you in this textual tag error that you have an unmatched closing brace at the coordinates x={{column}}, y{{row}}, and thus execution was impossible",
            "invalidradix": "I regret to inform you in this textual tag error that you were perhaps overzealous in choosing a radix to convert to that you failed to take in account the available range of 2-36, and instead provided '{{radix}}'",
            "notanarray": "I regret to inform you in this textual tag error that the variable '{{name}}' you attempted to load was not in fact an array at all, as its value was '{{value}}', and thus execution was impossible",
            "notbool": "I regret to inform you in this textual tag error that the variable '{{name}}' you attempted to load was not in fact an boolean at all, as its value was '{{value}}', and thus execution was impossible"
        },
        "inputtoolong": "Your input was too long! The maximum characters for this was {{max}}, but you gave {{length}} characters."
    },
    "command": {
        "general": {
            "ping": {
                "info": "This command is most definitely the favourite of anybody, as it is incredibly detailed and functional. Its purpose is to find the latency of the bot, thereby determining how quickly it is running. Of course there are many other contributing factors to the result of this command so you may find it favourable to take it with a grain of salt.",
                "usage": "ping",
                "randmsg": [
                    "Perhaps you'll find that existence and reality are not what you intuitively think they are.",
                    "It's very nice to have someone to talk in detail with once more, especially after what happened last time.",
                    "Your stupendous word of the day is: floccinaucinihilipilification",
                    "Your self worth is determined by the numeric quantity of characters delimited by spaces you can fit within a linguistic prose at once, which is correlated to a greater extend of mutual understanding and viable communication by statistics that are most definitely factual and are not simply made up on the spot.",
                    "I'm sorry to interrupt, but have you looked behind you?",
                    "To achieve world peace, the world must first be sanitized.",
                    "Cleanse yourself.",
                    "One must understand the value of words before one can fully understand themself or others.",
                    "Stay in school, you'll find it moderately more beneficial than absconding.",
                    "Your stupendous word of the day is: honorificabilitudinitatibus",
                    "Your stupendous word of the day is: sesquipedalianism"
                ],
                "final": "After much deliberation, I have looked deep within my self in a meditative state. My self-reflection has culmulated into a final result:\n```\n{{time}} milliseconds\n```\nTruly enlightening."
            },
            "brainfuck": {
                "info": "Executes brainfuck code.",
                "usage": "brainfuck <code>",
                "flags": {
                    "p": "Shows a list of pointers after the execution.",
                    "i": "Specifies the input for the `,` operator."
                }
            },
            "cat": {
                "info": "Gets a picture of a cat.",
                "usage": "cat"
            },
            "ship": {
                "info": "Gives you the ship name for two users.",
                "usage": "ship <user1> <user2>",
                "final": "Your shipname is **{{name}}**!",
                "notenough": "You have to tell me who to ship!"
            },
            "tag": {
                "info": "Tags are a system of public commands that anyone can create or execute, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit <https://blargbot.xyz/tags>.\nBy creating a tag, you acknowledge that you agree to the Terms of Service (<https://blargbot.xyz/tags/tos>).",
                "usage": "tag <name | subcommand> [args]",
                "dontown": "[[emote.x]] You don't own that tag!",
                "alreadyexists": "[[emote.x]] A tag with that name already exists!",
                "notag": "[[emote.x]] There is no tag with that name.",
                "tagset": "[[emote.check]] Tag `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The tag `{{old}}` has been renamed to `{{new}}`.",
                "raw": "The code for {{name}} is:\n```{{code}}```",
                "testoutput": "Test Output:\n\n{{output}}",
                "subcommand": {
                    "set": {
                        "usage": "tag set <name> <content>",
                        "info": "Creates or edits a tag with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "tag delete <name>",
                        "info": "Deletes a tag that you own."
                    },
                    "rename": {
                        "usage": "tag rename <name> <new name>",
                        "info": "Renames a tag that you own."
                    },
                    "raw": {
                        "usage": "tag raw <name>",
                        "info": "Gets the raw code of a tag."
                    },
                    "info": {
                        "usage": "tag info <name>",
                        "info": "Displays information about a tag."
                    },
                    "transfer": {
                        "usage": "tag transfer <name> <user>",
                        "info": "Transfers a tag to the specified user. Variables will not be transferred."
                    },
                    "top": {
                        "usage": "tag top",
                        "info": "Displays the tags that have been the most favorited."
                    },
                    "author": {
                        "usage": "tag author <name>",
                        "info": "Displays the author of a tag."
                    },
                    "search": {
                        "usage": "tag search <query>",
                        "info": "Searches for a tag with a name containing your query."
                    },
                    "list": {
                        "usage": "tag list [@user]",
                        "info": "Lists all the tags, or optionally all the tags created by a specific user."
                    },
                    "favorite": {
                        "usage": "tag favorite <name>",
                        "info": "Favorites the specified tag."
                    },
                    "report": {
                        "usage": "tag report <name>",
                        "info": "Reports a tag for violating the ToS. Please use responsibly."
                    },
                    "test": {
                        "usage": "tag test <code>",
                        "info": "Executes the given code in a test environment."
                    },
                    "help": {
                        "usage": "tag help [subcommand]",
                        "info": "Displays this!"
                    },
                    "docs": {
                        "usage": "tag docs [subtag]",
                        "info": "Gives a link to the BBTag documentation, or provides information about a specific subtag."
                    },
                    "setdesc": {
                        "usage": "",
                        "info": ""
                    },
                    "setusage": {
                        "usage": "",
                        "info": ""
                    }
                },
                "subcommandnotfound": "Couldn't find a subcommand with the name `{{subcommand}}`.",
                "transferprompt": "{{target}}, {{user}} wants to transfer ownership of the tag `{{tag}}` to you. Do you accept?\nThis will not transfer variables.",
                "nobots": "[[emote.x]] You cannot transfer a tag to a bot!",
                "transfercancelled": "[[emote.x]] The transfer has been cancelled.",
                "transfercomplete": "[[emote.check]] {{user}} now owns the tag `{{tag}}`.",
                "taginfo": "__**Tag | {{name}}**__\nAuthor: **{{author}}**\nLast Modified: **{{lastModified}}**\nIt has been used a total of **{{uses}} times**!\nIt has been favorited **{{favourites}} times**!\n\n{{desc}}",
                "descupdate": "The description for `{{tag}}` has been updated.",
                "descreset": "The description for `{{tag}}` has been reset.",
                "subcommandconflict": "You can't use the name `{{name}}` because there is a subcommand with that name!",
                "toptagformat": "{{index}}. **{{name}}** ({{author}})\n    - Favorites: {{favourites}} Uses: {{uses}}",
                "toptags": "Here are the top 10 tags!\n\n{{tags}}",
                "tagauthor": "The tag `{{tag}}` was created by **{{author}}**.",
                "favouriteadd": "The tag `{{tag}}` has been added to your favorites list.",
                "favouriteremove": "The tag `{{tag}}` has been removed from your favorites list.",
                "favourites": "You have {{count}} tags on your favorites list.\n```fix\n{{tags}}\n```"
            },
            "ccommand": {
                "info": "CCommands are a system of custom commands that moderators can create for their users, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit <https://blargbot.xyz/tags>.",
                "usage": "cc <subcommand> [args]",
                "subcommand": {
                    "set": {
                        "usage": "cc set <name> <content>",
                        "info": "Creates or edits a custom command with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "cc delete <name>",
                        "info": "Deletes a custom command."
                    },
                    "rename": {
                        "usage": "cc rename <name> <newName>",
                        "info": "Renames a custom command."
                    },
                    "author": {
                        "usage": "cc author <name>",
                        "info": "Returns the author of the custom command."
                    },
                    "transfer": {
                        "usage": "cc transfer <name> <user>",
                        "info": "Transfers ownership of a custom command to somebody else. Must be consensual."
                    },
                    "list": {
                        "usage": "cc list",
                        "info": "Lists the custom commands on the guild."
                    },
                    "test": {
                        "usage": "cc test",
                        "info": "Executes code in the context of your account."
                    },
                    "help": {
                        "usage": "cc help [subcommand]",
                        "info": "Displays this!"
                    }
                },
                "dontown": "[[emote.x]] You don't own that custom command!",
                "notag": "[[emote.x]] There is no custom command with that name.",
                "tagset": "[[emote.check]] Custom command `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The custom command `{{old}}` has been renamed to `{{new}}`",
                "raw": "The code for {{name}} is:\\n```{{code}}```",
                "alreadyexists": "A custom command with that name already exists.",
                "testoutput": "Test Output:\\n\\n{{output}}"
            },
            "locale": {
                "info": "Provide a definition to assist me in supplying you with linguistic translation for the locale of your choice.",
                "usage": "locale",
                "set": "Marvelous! From this point on, I will provide informative and outstanding messages to assist your comprehension of the bot, and will attempt to be as verbose as programatically possible. It is quite remarkable how much easier using me will become due to this! You are quite a sensible person for making such a phenomenal decision. Trust me. The choice that you have made is most definitely the correct and factually valid one.",
                "list": "As of the current moment, you'll find that I am making an effort to deliver your messages in a manner that is as informative and verbose as possible. Isn't it wonderful? Absolutely stupendous!\n\nOf course, if you tire of my antics you may always switch to another locale by using your cursor to select one of the buttons that are immediately underneath this message.\n\nBut doing such a thing isn't something that you as a studious and superb user would do, is it?"
            },
            "tokenify": {
                "info": "",
                "usage": ""
            }
        },
        "image": {
            "cat": {
                "info": "Gives you a lovely dear sweet precious kitty.\nD'awww!",
                "usage": "cat"
            }
        },
        "admin": {
            "mod": {
                "setrole": "The staff roles have been updated.",
                "rolequery": "Select the roles that will be considered moderator roles. Users with these roles will be able to use admin commands.",
                "info": "Sets what users/roles are considered to be staff.",
                "usage": "mod <subcommand>",
                "subcommand": {
                    "user": {
                        "usage": "mod user <add | remove> <user>...",
                        "info": "Adds or removes the specified user(s) to the staff list."
                    },
                    "role": {
                        "usage": "mod user role",
                        "info": "Brings up a dialog to select or deselect roles."
                    }
                }
            }
        }
    },
    "tag": {
        "comment": {
            "desc": "Specifies an area that will be ignored from parsing.",
            "example": {
                "in": "This will be shown {//;This won't be}",
                "out": "This will be shown"
            }
        },
        "void": {
            "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
            "example": {
                "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                "out": "This will be shown  but this will be set"
            }
        },
        "randint": {
            "desc": "Returns a random integer between the provided range. `min` defaults to `0`.",
            "example": {
                "in": "One: {randint;5}, two: {randint;10;20}",
                "out": "One: 2, two: 17"
            }
        },
        "array": {
            "filter": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array only containing the elements where the result of the iteration was `true` or `1`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{filter;array;{logic;{get;i};<;3}}",
                    "out": "[1;2]"
                }
            },
            "foreach": {
                "desc": "Iterates through an array, setting the local variable `i` to the current element. If `varName` is provided, sets that variable instead.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.foreach;array;Element:{get;i}{newline}}",
                    "out": "Element:1\nElement:2\nElement:3\nElement:4\nElement:5"
                }
            },
            "get": {
                "desc": "Gets an element from an array at the position `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\nElement at index 3: {array.get;array;3}",
                    "out": "Element at index 3: 4"
                }
            },
            "isarray": {
                "desc": "Returns true if the provided element is an array, and false otherwise. You cannot use variable names.",
                "example": {
                    "in": "{set;arr1;[this;is;an;array]}\n{set;arr2;this is not an array}\narr1: {array.isarray;{get;arr1}}\narr2: {array.isarray;{get;arr2}}",
                    "out": "arr1: true\narr2: false"
                }
            },
            "join": {
                "desc": "Joins an array with the provided `delimiter`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.join;array;,{space}}",
                    "out": "1, 2, 3, 4, 5"
                }
            },
            "length": {
                "desc": "Returns the length of the given array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.length;array}",
                    "out": "5"
                }
            },
            "map": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array where each element is the result of each iteration.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.map;array;{math;i;*;2}}",
                    "out": "[2;4;6;8;10]"
                }
            },
            "pop": {
                "desc": "Removes and returns the last element of the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.pop;array}\n{get;array}",
                    "out": "5\n[1;2;3;4]"
                }
            },
            "push": {
                "desc": "Pushes an element to the end of an array. Returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.push;array;6}",
                    "out": "[1;2;3;4;5;6]"
                }
            },
            "set": {
                "desc": "Sets an element on the array at the specified `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;8;5]}\n{get;array}\n{array.set;array;3;4}\n{get;array}",
                    "out": "[1;2;3;8;5]\n\n[1;2;3;4;5]"
                }
            },
            "shift": {
                "desc": "Removes and returns the first element in the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.shift;array}\n{get;array}",
                    "out": "1\n[2;3;4;5]"
                }
            },
            "slice": {
                "desc": "Returns a section of the array, including the `start` index and excluding the `end` index. If `end` is unspecified, defaults to all remaining elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{slice;array;3}\n{slice;array;2;4}",
                    "out": "[4;5]\n[3;4]"
                }
            },
            "sort": {
                "desc": "Sorts and returns an array, by default in ascending order.\n\nIf `function` is provided, sorting will occur based on the result of executing said function. This will set two local variables: `a` (or `varNameOne`) and `b` (or `varNameTwo`). \n\nThe function must return a number. If the number is greater than 0, `a` will be considered greater than `b`. If the number is lower than 0, `b` will be considered greater than `a`. Any non-number result will be converted to 0, where both elements are equal.",
                "example": {
                    "in": "{set;array;[2;5;1;6;3;7]}\n{sort;array}\n{sort;array;{math;b;-;a}}",
                    "out": "[1;2;3;5;6;7]\n[7;6;5;3;2;1]"
                }
            },
            "splice": {
                "desc": "Starting at the position `start`, removes `deleteCount` elements from the array and adds the remaining `items` at that position. Returns the removed elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.splice;array;2;2;inserted;items}\n{get;array}",
                    "out": "[3;4]\n[1;2;inserted;items;5]"
                }
            },
            "split": {
                "desc": "Splits the `text` by the `delimiter`, returning the new array.",
                "example": {
                    "in": "{array.split;This will be split by spaces;{space}}",
                    "out": "[This;will;be;split;by;spaces]"
                }
            },
            "unshift": {
                "desc": "Inserts `value` at the beginning of the array, and returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.unshift;array;0}",
                    "out": "[0;1;2;3;4;5]"
                }
            }
        },
        "channel": {
            "id": {
                "desc": "Returns the ID of the current or specified channel.",
                "example": {
                    "in": "{channel.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "nsfw": {
                "desc": "Returns whether the current or specified channel is NSFW.",
                "example": {
                    "in": "{channel.nsfw}",
                    "out": "false"
                }
            },
            "name": {
                "desc": "Returns the name of the current or specified channel.",
                "example": {
                    "in": "{channel.name;#general}",
                    "out": "general"
                }
            },
            "position": {
                "desc": "Returns the position of the current or specified channel.",
                "example": {
                    "in": "{channel.position}",
                    "out": "1"
                }
            },
            "topic": {
                "desc": "Returns the topic of the current or specified channel (text only).",
                "example": {
                    "in": "{channel.topic}",
                    "out": "This is an example channel topic."
                }
            },
            "type": {
                "desc": "Returns the type of the current or specified channel (returns \"text\" or \"voice\").",
                "example": {
                    "in": "{channel.type}",
                    "out": "text"
                }
            }
        },
        "general": {
            "clean": {
                "desc": "Cleans the provided text by shrinking all whitespace.",
                "example": {
                    "in": "{clean;  one\n\n                two\n  \n\n    three}",
                    "out": "one\ntwo\nthree"
                }
            },
            "//": {
                "desc": "Specifies an area that will be ignored from parsing",
                "example": {
                    "in": "This will be shown {//;This won't be}",
                    "out": "This will be shown"
                }
            },
            "get": {
                "desc": "Returns the stored variable with the supplied name. Variable prefixes can modify the pool in which to search.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "set": {
                "desc": "Sets the stored variable with the supplied name to the supplied value. Variable prefixes can modify the pool in which to set.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "trim": {
                "desc": "Removes whitespace before and after the provided text. Consider using the {clean} tag to remove whitespace within the text.",
                "example": {
                    "in": "{trim;{space;5}Hello{space;5}}",
                    "out": "Hello"
                }
            },
            "void": {
                "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
                "example": {
                    "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                    "out": "This will be shown  but this will be set"
                }
            },
            "newline": {
                "desc": "Returns the specified number of newlines, defaulting to 1.",
                "example": {
                    "in": "One{newline;5}Two",
                    "out": "One\n\n\n\n\nTwo"
                }
            },
            "space": {
                "desc": "Returns the specified number of spaces, defaulting to 1.",
                "example": {
                    "in": "One{space;5}Two",
                    "out": "One     Two"
                }
            }
        },
        "guild": {
            "createdat": {
                "desc": "Returns when the current guild was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{guild.createdat}",
                    "out": "1466379030450"
                }
            },
            "channels": {
                "desc": "Returns the channels in the current guild as an array.",
                "example": {
                    "in": "{guild.channels}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "icon": {
                "desc": "Returns the URL of the current guild's icon.",
                "example": {
                    "in": "{guild.icon}",
                    "out": "https://cdn.discordapp.com/icons/194232473931087872/2e9d173fc1461ff9e4672cb8782978e7.png?size=512"
                }
            },
            "id": {
                "desc": "Returns the ID of the current guild.",
                "example": {
                    "in": "{guild.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "name": {
                "desc": "Returns the name of the current guild.",
                "example": {
                    "in": "{guild.name}",
                    "out": "Cat Town"
                }
            },
            "owner": {
                "desc": "Returns the ID of the guild's owner.",
                "example": {
                    "in": "{guild.owner}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "region": {
                "desc": "Returns the region the current guild is in.",
                "example": {
                    "in": "{guild.region}",
                    "out": "us-west"
                }
            },
            "roles": {
                "desc": "Returns an array of roles in the current guild.",
                "example": {
                    "in": "{guild.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            }
        },
        "logic": {
            "if": {
                "desc": "If the `value` is equal to `true` or `1`, executes `then`.\nIf the `value` is equal to `false` or `0`, executes `else`.\nOtherwise, throws an error.\n\nUse this with the {logic} tag.",
                "example": {
                    "in": "{if;true;This will be shown.;This won't be shown.}",
                    "out": "This will be shown."
                }
            },
            "logic": {
                "desc": "Does logical operators on the `augend` and `operands`, returning `true` or `false`.\n\nEquivalence Operators:\n - `==` - equal\n - `!=` - not equal\n - `<` - less than\n - `<=` - less than or equal\n - `>` - greater than\n - `>=` - greater than or equal\n - `startswith` - the augend starts with the operand\n - `endswith` - the augend ends with the operand\n - `includes` - the augend includes the operand\n\nLogical Operators:\n - `&&` - returns true if the augend and operand are both true\n - `||` - returns true if either the augend or operand are true\n - `XOR` - returns true if only one of the augend and operand are true (not both)\n\nOther Operators:\n - `!` - inverts the next operand (true becomes false, etc.)",
                "example": {
                    "in": "{logic;5;==;6}\n{logic;5;!=;6;&&;5;>;6}\n{logic;5;>=;6;||;5;<;6}\n{logic;5;<=;6;xor;true}\n{logic;1234;startswith;12}\n{logic;1234;endswith;34}\n{logic;1234;includes;23}\n{logic;!;true}\n{logic;!;5;!=;5}",
                    "out": "false\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue"
                }
            }
        },
        "math": {
            "abs": {
                "desc": "Returns the absolute value of the provided number (no negatives).",
                "example": {
                    "in": "{math.abs;-3523}",
                    "out": "3523"
                }
            },
            "base": {
                "desc": "Parses the `number` using the provided base `origin` (defaulting to 10), and converts it to base `radix`.",
                "example": {
                    "in": "{math.base;FA;16;10}",
                    "out": "250"
                }
            },
            "ceil": {
                "desc": "Rounds the provided decimal up.",
                "example": {
                    "in": "{math.ceil;1.25}",
                    "out": "2"
                }
            },
            "floor": {
                "desc": "Rounds the provided decimal down.",
                "example": {
                    "in": "{math.floor;1.75}",
                    "out": "1"
                }
            },
            "math": {
                "desc": "Calculates the value of the provided expression using the following operators:\n\n - `^` - exponents\n - `/` - division\n - `*` - multiplication\n - `+` - addition\n - `-` - subtraction\n - `&` - bitwise AND\n - `|` - bitwise OR\n - `XOR` - bitwise XOR\n\nOperators are executed using the Order of Operations (Brackets, Exponents, Division, Multiplication, Addition, Subtraction, Bitwise).\n\nIf an operator isn't specified, it uses the last-used operator (defaulting to addition).\n\nBrackets would be achieved by using another nested {math} tag.\n\nIf an `operand` or `augend` cannot be parsed as a number, a variable with the same name will be retrieved. If the retrieved variable is also not a number, throws an error.",
                "example": {
                    "in": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: {math;1;+;2;^;2;*;3;-;4;/;5}\n\nEquation: 4 + 6 + 8\nAnswer: {math;4;6;8}\n\nEquation: 01001010 | 11000100 & 11111011\n{trim;{set;bin1;{math.base;01001010;2;10}}\n{set;bin2;{math.base;11000100;2;10}}\n{set;bin3;{math.base;11111011;2;10}}\nAnswer: {base;{math;bin1;|;bin2;|;bin3};10;2}}",
                    "out": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: 12.2\n\nEquation: 4 + 6 + 8\nAnswer: 18\n\nEquation: 01001010 | 11000100 & 11111011\nAnswer: 11111111"
                }
            },
            "parsefloat": {
                "desc": "Attempts to parse the given text as a decimal.",
                "example": {
                    "in": "{math.parsefloat;2.5}\n{math.parsefloat;not a number}",
                    "out": "2.5\nNaN"
                }
            },
            "parseint": {
                "desc": "Attempts to parse the given text as an integer.",
                "example": {
                    "in": "{math.parseint;2.5}\n{math.parseint;not a number}",
                    "out": "2\nNaN"
                }
            },
            "randint": {
                "desc": "Returns a random integer between the provided range. `min` defaults to `0`",
                "example": {
                    "in": "One: {randint;5}, two: {randint;10;20}",
                    "out": "One: 2, two: 17"
                }
            },
            "round": {
                "desc": "Rounds the given `number` to the specified decimal `places`, defaulting to 0.",
                "example": {
                    "in": "{math.round;5.125}\n{math.round;5.125;1}\n{math.round;5.125;2}",
                    "out": "5\n5.1\n5.13"
                }
            }
        },
        "message": {
            "id": {
                "desc": "Returns the ID of the executing command message.",
                "example": {
                    "in": "{message.id}",
                    "out": "[[generic.example.id1]]"
                }
            }
        },
        "role": {
            "color": {
                "desc": "Returns the color of the specified role in hexadecimal.",
                "example": {
                    "in": "#{role.color;coolrole}",
                    "out": "#2ECC71"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified role.",
                "example": {
                    "in": "{role.id;coolrole}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "mention": {
                "desc": "Returns a mention of the specified role.",
                "example": {
                    "in": "{role.mention;coolrole}",
                    "out": "@coolrole"
                }
            },
            "name": {
                "desc": "Returns the name of the specified role.",
                "example": {
                    "in": "{role.name;coolrole}",
                    "out": "coolrole"
                }
            },
            "position": {
                "desc": "Returns the position of the specified role.",
                "example": {
                    "in": "{role.position;coolrole}",
                    "out": "5"
                }
            }
        },
        "user": {
            "avatar": {
                "desc": "Returns the avatar URL of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.avatar}",
                    "out": "https://cdn.discordapp.com/avatars/[[generic.example.id1]]/avatarhash.png"
                }
            },
            "createdat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.createdat}",
                    "out": "1444710446104"
                }
            },
            "discrim": {
                "desc": "Returns the discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.discrim}",
                    "out": "1111"
                }
            },
            "fullname": {
                "desc": "Returns the name + discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.fullname}",
                    "out": "person#1111"
                }
            },
            "game": {
                "desc": "Returns the game the specified user is playing, defaulting to the executing user. If the user isn't playing a game, returns nothing.",
                "example": {
                    "in": "{user.game}",
                    "out": "with BBTag!"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "joinedat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, joined the current guild as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.joinedat}",
                    "out": "1466379030499"
                }
            },
            "mention": {
                "desc": "Mentions the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.mention}",
                    "out": "@person"
                }
            },
            "name": {
                "desc": "Returns the name of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.name}",
                    "out": "person"
                }
            },
            "nick": {
                "desc": "Returns the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.nick}",
                    "out": "CoolNickname"
                }
            },
            "roles": {
                "desc": "Returns an array of the roles the specified user has, defaulting to the executing user.",
                "example": {
                    "in": "{user.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "setnick": {
                "desc": "Sets the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.setnick;EvenCoolerNickname}",
                    "out": "(the nickname was set)"
                }
            },
            "status": {
                "desc": "Returns the status of the specified user, defaulting to the executing user. Can return \"online\", \"away\", \"dnd\", or \"offline\".",
                "example": {
                    "in": "{user.status}",
                    "out": "online"
                }
            }
        }
    }
}
{
    "language": "Dansk",
    "header": {
        "login": "Log på",
        "logout": "Log af",
        "commands": "Kommandoer",
        "bbtag": "BBTag",
        "subtags": "SubTags",
        "dashboard": "Instrumentbræt"
    },
    "generic": {
        "loading": "Indlæser",
        "collapse": "Skjul alle",
        "expand": "Udvid alle",
        "search": "Filter...",
        "noresults": "Åh nej! Der kunne ikke blive fundet noget resultat.",
        "resultsfound": "Tilsvarende resultater:"
    },
    "index": {
        "desc": "blargbot er en multifunktionel Discord bot dedikeret til at levere kvalitets kommandoer og tjenester, herunder chatlogs og et dybdegående brugerdefinerede kommando system.",
        "commands": {
            "title": "Kommandoer",
            "desc": "blargbot er udstyret med talrige kommandoer, som alle er dokumenteret og kategoriseret for din bekvemmelighed."
        },
        "bbtag": {
            "title": "BBTag",
            "desc": "blargbot bruger et sofistikeret tag system kaldet BBTag, som du kan bruge til at oprette avancerede brugerdefinerede kommandoer."
        },
        "customization": {
            "title": "Tilpasning",
            "desc": "Vi forstår, at ikke alle servere er ens, så blargbot har omfattende tilpasning. Du kan styre, nøjagtigt hvilke roller kan bruge hvilke kommandoer, angive brugerdefinerede præfikser, og endda ændre grænsefladesproget!"
        },
        "moderation": {
            "title": "Moderation",
            "desc": "Brug for noget til at overvåge din chat? blargbot er udstyret med mange moderation hjælpeværktøjer, fra grundlæggende operationer som udelukkelse og muting, til mere avancerede ting som chatlogging eller automatiske censur."
        },
        "opensource": {
            "title": "Open Source",
            "desc": "Deling er omsorgsfulde! blargbot er helt open source under licensen GNU AGPLv3. Du er velkommen til at tage et kig og lær hvordan det hele fungerer. Hvis du bruger noget af min kode i dit eget projekt, er du forpligtet til at angive mig som kilde. Se licens for flere detaljer."
        },
        "suggestions": {
            "title": "Åben for forslag",
            "desc": "Har du et forslag til botten? Jeg vil være glad for at høre det! Fundet en fejl? Jeg vil gerne høre fra dig om også! Du kan foreslå noget for mig ved hjælp af kommandoen `suggest`, ved at tilslutte min server, eller ved at indsende en anmodning om support."
        }
    },
    "bbtag": {
        "main": "# BBTag\n> ikke må forveksles med BBCode!\n\nBBTag er en skabelon-baseret programmeringssprog, designet til at give en kraftig ramme for at oprette avancerede brugerdefinerede kommandoer.\n\n### Terminologi\n\n- Et 'tag' refererer til en blok af BBTag kode, uanset om det er en offentlig tag eller en brugerdefineret kommando. -En 'undertag' refererer til en BBTag komponent. Avanceret 'tags' er lavet af mange 'subtags'.\n\n-En 'class' refererer til en gruppe af 'subtags'.",
        "subtags": {
            "title": "SubTags",
            "desc": "## SubTags\n\nSubtags er de basale byggesten af BBTag. De udfører dynamiske funktioner, uanset om det er at få navnet på en bruger eller om det er at udføre matematiske regnestykker. Lad os nu tage et kig på et subtag:\n```\n{math.randint;1;10}\n```\nNår udført, kan det returnere følgende:\n```\n6\n```\nSom du kan se, returner `math.randint` subtagget et tilfældigt heltal indenfor de angivne rammer.\n\n## SubTaggens anatomi\n\nEt SubTag består af adskillige komponenter. Et syntax diagram kan se således ud:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nJa okay. Det kan godt være forvirrende men bær lige over med mig.\n\n> `[class.]name`\n\nSubtags er delt op i grupper, ved navn **classes**. Hver class er designet med en bestemt type formål. For eksempel vil `math` classen indeholde subtags der tager sig af tal. På samme måde vil `user` classen indeholde subtags der giver oplysninger om brugere. Classer giver et organiserings system.\n\nNår subtags bruges, vil den foretrukne benyttelse være `{class.name}`. Dette forbedrer læsbarheden. Det er dog normalt valgfrit om classen skal anføres utvetydeligt. BBTag ved, at `{math.randint}` og `{randint}` er den samme subtag. Dette kaldes for **implicit classing**. Undtagelsen til dette er subtags i `general` classen, der skal bruges *uden* en explicit class.\n\nDu bør dog være forsigtig med explicit classing! Nogle gange kan classes godt have subtags med det samme navn. For eksempel har både `{user.id}` og `{channel.id}` subtags med navnet `id`. Hvis du forsøger at bruge implicit classing der findes i adskillige classes, vil den returnere en fejl!\n\n#### Piping\n\n> `[![var]]`\n\nPiping er en feature der tillader dig at omdirigere outputtet fra et subtag, til enten en variabel eller til en void. Dette kan hjælpe med at rydde op i din kode.\n\nHvis du for eksempel, af en eller anden årsag, ikke vil have et subtag til at give noget output, kan du tilføje et `1` efter navnet på subtagget for at få det til at tie stille. De følgende linjer gør det samme:\n```\n{void;{math.radiant;1;10}}\n{math.radiant!;1;10}\n```\nPiping output er en anelse hurtigere at udføre end at bruge den fulde syntax.\n\n#### Argumenter\n> `[;args]...`\n\nDu kan lade parametre passere ind i subtags. Disse adskilles med semikolon `;`. Argumenter er forskellige fra subtag til subtag, og dokumentationen for disse kan findes på subtag siden.\n\n##### Navngivne argumenter\n\n>`=<namedArgs>...`\n\nNormalt er rækkefølgen på de angivne argumenter meget vigtig. Du kan dog bruge de navngivne modstykke istedet for. Dette gøres ved at bruge `=` istedet for et semikolon og derefter ved at angive key-value tags i form af `{*key;value}`.\n\nFor eksempel vil brugen af `{math.randint}` være `{math.randint;min;max}`. Navnene på argumenterne er henholdsvis `min` og `max`. De bruges på følgende måde: \n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nDu kan ikke bruge både navngivne argumenter og rangerede argumenter i samme subtag."
        },
        "variables": {
            "title": "Variabler",
            "desc": "## Variabler\n\nBBTag kommer med flere typer af variabler, hver med sit eget scope. Disse variabler kan bruges i adskillige handlinger og funktioner.\n\n### Navne\n\nNavnet på et variable består af to dele: et `prefix` og et `name`. Her er et diagram over syntaxen:\n\n> `[prefix]name`\n\nEnkelt, ikke sandt?\n\n### Scopes\n\nEt **scope** henviser til der hvor du kan få adgang kan få adgang til variabler fra, og hvor lang tid de holder. Det at vide hvilket scope der skal bruges kan være en stor hjælp til at skabe tags!\n\nEn anden måde at se på scopes er hvor de er *opbevaret*. Foreksempel er lokale variabler opbevaret i selve tagget, hvorved forfatter variabler er opbevaret ved selveste den bruger der skabte tagget.\n\nLad os tage et kig på alle de forskellige typer scopes, fra de mindste til de største.\n\n#### **Midlertidigt** scope\n> Ingen præfix\n\nMidlertidige variabler er de mest basale og mest brugte variabler, da de har de mindste scopes. Disse variabler bliver *aldrig lagret i databasen*, og stopper med at eksistere efter tagget har færdiggjort udførslen. De er som sådan dem der er hurtigst at bruge.\n\nBrug midlertidige variabler for ting der ikke behøver at være vedvarende for hver gang de bruges.\n\n#### **Lokalt** Scope\n> Præfix: `~`\n\nLokale variabler kan kun tilgås af selve de tags de er blevet skabt af. De præsterer næsten på samme måde som midlertidige variabler, med den undtagelse, at de er vedholdende mellem hver gang de bruges.\n\nLokale variabler lagres direkte til selve tagget.\n\n#### **Guild** Scope\n> Præfix: `_`\n\nGuild variabler kan kun tilgås fra den server hvor de er blevet skabt i. De passer bedst til brugerdefinerede kommandoer, da enhver brugerdefineret kommando i en server deler de samme variable pool uanset forfatter.\n\nGuild variabler lagres i den server som tagget udføres i. \n\n#### **Author** Scope\n\nForfatter variabler kan kun tilgås af ethvert tag der har den samme forfatter. De passer bedst til offentlige tags. Dette betyder, at det hovedsageligt er en personlig variabel pool som du kan bruge til alle dine tags. \n\nForfatter variabler lagres ved den bruger der skabte tagget.\n\n### **Shared** scope\n**NOTE**: Endnu ikke implementeret.\n> Præfix: `&<name>&`\n\nDelte variabler er de mest komplicerede. De fungerer baseret på dynamiske variabel pools, der er tildelt specifikke tag clusters. Det tilsigtede formål med delte variabler er, at forskellige bruger kan samarbejde på forskellige tags, mens de deler de samme variabler.\n\nDe specifikke brugs tilfælde er som følger:\n1. Adskillige brugere skaber forskellige tags\n2. En af brugerne skaber et cluster tag med et bestemt navn (for eksempel `test`)\n3. Denne bruger tilføjer så hver af de enkelte tags der er skabt til clusteret\n4. Hvert tag er så istand til at tilgå clusterens variabel pool ved at bruge clusterets navn som præfix (for eksempel `&test&`)\n\nSå i dette tilfælde vil den delte variabel `apple` være tilgået med det fulde navn `&test&apple`."
        },
        "arrays": {
            "title": "Arrays",
            "desc": "## Arrays\n\nArrays er en super nyttig data struktur. Helt basalt er et array en liste af genstande. De bruges på samme måde som subtags, med firkantede parenteser `[]` istedet for `{}`.\n\nDer er adskillige subtags dedikerede til at bruge og manipulere med arrays. Se `Arrays` classen for mere info. \n\n### Syntax\n> `[item;item;item]`\n\n### Indexer\n\nArrays er velordnede."
        }
    },
    "subtags": {
        "components": {
            "argument": "Argumenter:",
            "named": "Understøtter navngivne argumenter",
            "unnamed": "Støtter **ikke** navngivne argumenter",
            "array": "Understøtter arrays",
            "staff": "Kræver forfatter er personale",
            "noimplicit": "Understøtter ikke implicit klassificering"
        },
        "referdocs": "Der henvises til [documentation](/bbtag) for at få flere instrukser for benyttelse."
    },
    "commands": {
        "title": "Kommandoer",
        "desc": "blargbot er udstyret med talrige kommandoer. Som standard svarer blargbot til præfikset `b!`, `blargbot`, og når du nævner Blargbot. Du kan tilføje præfikser både for dig selv og for servere. \n\nNogle kommandoer kan kun bruges af medlemmer som du definerer som værende personale. Du kan også tilpasse restriktioner af brugen for de enkelte kommandoer.\n\nNogle kommandoer har specielle krav i forhold til tilladelser for at kunne udføres, som for eksempel at lægge billeder op. Venligst sikre dig, at botten har de rigtige rettigheder når du prøver at udføre en kommando.\n\n## Argumenter \n- `<>` - betyder et påkrævet argument\n- `[]` - betyder et valgfrit argument\n- `...` - betyder et gentaget argument\n\n### Flags\nNogle kommandoer er i stand til at tage kommandoprompt-lignende flag parametre. Alle flags er inddelt i flag koder (med præfikset `-`) og ord (med præfikset --). Flags kan angives i enhver rækkefølge det skulle være, men skal komme efter normale argumenter.\n\nFor eksempel hvis en kommando tager imod et bruger input, vil det være muligt at bruge `-u` eller `--user`.\n```\nb!command --user @user#1234\nb!command -u @user#1234\n```\nDet er også muligt at kæde flags sammen. For eksempel vil `-flag test` aktivere flags `-f``-l`, `-a` og give indholdet 'test' til `-g`.",
        "components": {
            "usage": "Brug:",
            "flags": "Flag:",
            "aliases": "Aliaser:",
            "subcommands": "Underkommandoer:"
        }
    },
    "dashboard": {
        "userheader": "Bruger Indstillinger",
        "guildheader": "Server Indstillinger",
        "notauthed": "### Beklager, du kan ikke tilgå denne side\n\nLog venligst på for at bruge instrumentbrættet.",
        "user": {
            "dmerrors": "DM fejl"
        }
    }
}
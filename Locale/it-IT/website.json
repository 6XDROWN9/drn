{
    "language": "Italiano",
    "header": {
        "login": "Login",
        "logout": "Logout",
        "commands": "Comandi",
        "bbtag": "BBTag",
        "subtags": "Sottotag",
        "dashboard": "Pannello Amministrazione"
    },
    "generic": {
        "loading": "Caricamento in corso",
        "collapse": "Comprimi Tutto",
        "expand": "Espandi Tutto",
        "search": "Filtro...",
        "noresults": "Uh oh! Non sono stati trovati risultati.",
        "resultsfound": "Risultati corrispondenti:"
    },
    "index": {
        "desc": "blargbot è un bot multipurpose di Discord dedicato a portare comandi e servizi di alta qualità, chatlogs e creazione di comandi personalizzati inclusi.",
        "commands": {
            "title": "Comandi",
            "desc": "blargbot è dotato di numerosi comandi, ognuno dei quali sono documentati e classificati per la vostra comodità."
        },
        "bbtag": {
            "title": "BBTag",
            "desc": "blargbot utilizza un sistema di tag sofisticato chiamato BBTag, che è possibile utilizzare per creare comandi personalizzati avanzati."
        },
        "customization": {
            "title": "Personalizzazione",
            "desc": "Siamo consapevoli che non ogni gilda è la stessa, così blargbot ha personalizzazione estesa. È possibile controllare esattamente quali ruoli possono utilizzate quali comandi, specificare i prefissi personalizzati e anche cambiare la lingua di visualizzazione!"
        },
        "moderation": {
            "title": "Moderazione",
            "desc": "Need something to moderate your chat? blargbot is equiped with many moderation utilities, from basic operations like banning and muting, to more advanced stuff like chatlogging or automatic censoring."
        },
        "opensource": {
            "title": "Open-Source",
            "desc": "Condivisione è la cura! blargbot è completamente open-source sotto la licenza AGPLv3 GNU. Sentitevi liberi di dare un'occhiata e imparare come funziona il tutto. Se si utilizza uno qualsiasi dei miei codici nel proprio progetto, è necessario creditarmi. Vedere la licenza per ulteriori dettagli."
        },
        "suggestions": {
            "title": "Aperti ai suggerimenti",
            "desc": "Hai un suggerimento per il bot? Sarei felice di sentirlo! Trovato un bug? Mi piacerebbe sentire anche questo! Puoi suggerirmi qualunque cosa usando il comando `suggest`, entrando nella mia gilda o inviando un ticket."
        }
    },
    "bbtag": {
        "main": "# BBTag\n> Non deve essere confuso con il BBCode!\n\nBBTag è un linguaggio template-based, costruito per fornire un framework potente per creare comandi personalizzati avanzati.\n\n### Terminologia\n\n- Una `tag` si riferisce ad un blocco del codice BBTag, non importa se è una tag pubblica o un comando personalizzato.\n- Una `sottotag` (subtag) si riferisce ad un componente BBTag. `tags` avanzate sono composte da molte `sottotag`.\n- Una `classe` (class) si riferisce ad un gruppo di`sottotag`.",
        "subtags": {
            "title": "Sottotags",
            "desc": "## Subtag\n\nI subtag sono la base principale del sistema BBTag. Eseguono funzioni dinamiche, cose come prendere il nome di un utente or eseguire della matematica.\n\nEcco un subtag:\n```\n{math.randint;1;10}\n```\nQuando eseguito, questo subtag potrebbe ritornare un risultato simile a questo:\n```\n6\n```\nCome puoi vedere, il subtag `math.randint` ritorna un numero intero nei valori specificati.\n\n## Anatomia di un subtag\n\nUn subtag è composto di componenti diversi. Un diagramma di sintassi potrebbe essere qualcosa del genere:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nTi potrebbe confondere all'inizio, ma c'è una spiegazione!\n\n#### Classi\n\n> `[class.]name`\n\nI subtag sono divisi in gruppi, che si chiamano **classi**. Ogni classe ha un motivo specifico. Per esempio, la classe `math` contiene subtag che operano sui numeri. La classe `user` contiene subtag che danno informazione sugli utenti.\nLe classi provvedono un sistema di organizzazione.\n\nQuando si usa un subtag, l'uso preferito sarebbe `{class.name}`. Questo lo rende più leggibile. Però, dare la classe al sistema BBTag è opzionale, di solito. BBTag sa che `{math.randint}`e `{randint}` sono lo stesso subtag. Queste si chiamano **classi implicite**. L'eccezione di questo sono i subtag nella classe `general`, che dovrebbero essere usati *senza* una classe esplicita.\n\nPerò, dovresti fare attenzione con le classi implicite! A volte, le classi potrebbero avere subtag collo stesso nome. Per esempio, `{user.id}` and `{channel.id}` hanno entrambi subtag con nome `id`. Se provi ad usare le classi implicite con un subtag che esiste in più classi, ritornerà un errore!\n\n#### Piping\n> `[![var]]`\n\nIl piping è una funzione che ti fa ridirezionare l'output di un subtag in una variabile o nel nulla (nullificandola). Questo può aiutare nella pulizia del codice.\n\nPer esempio, se non vuoi che un subtag produca output per nessun motivo, puoi aggiungere un `!` dopo il nome subtag per silenziarla.\nLe linee seguenti sono equivalenti:\n```\n{void;{math.randint;1;10}}\n{math.randint!;1;10}\n```\nSe vuoi inserire l'output di un subtag in una variabile, puoi aggiungere `!nomeVariabile` dopo il nome subtag.\nLe linee seguenti sono equivalenti:\n```\n{set;randomInteger;{math.randint;1;10}}\n{math.randint!randomInteger;1;10}\n```\nIl piping è leggermente più veloce da eseguire rispetto alla sintassi completa.\n\n#### Argomenti\n\n> `[;args]...`\n\nPuoi passare dei parametri ai subtag. Questi sono separati dai punti e virgola `;`. Gli argomenti sono differenti per ogni subtag, e documentazione per ogni argomento può essere trovato sulla pagina del subtag.\n\n##### Argomenti con nome\n\n> `=<namedArgs>...`\n\nNormalmente, l'ordine degli argomenti è molto importante. Però, puoi usare le controparti con nome come alternativa. Questo si può fare usando un uguale `=` invece di un punto e virgola, poi specificando dei tag chiave-valore, nel formato `{*chiave;valore}`\n\nPer esempio, l'uso di `{math.randint}` è `{math.randint;min;max}`. I nomi degli argomenti sono `min` e `max` rispettivamente.\nQuesti usi sono equivalenti:\n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nNon puoi utilizzare gli argomenti con nome e gli argomenti con ordine nello stesso subtag."
        },
        "variables": {
            "title": "Variabili",
            "desc": "## Variabili\n\nBBTag dispone di diversi tipi di variabili, ognuna con un'accessibilità diversa. Possono essere usate per numerose operazioni e funzioni.\n\n### Nomi\n\nIl nome di una variabile è formato da due parti: un `prefisso` e un `nome`. Ecco un diagramma di sintassi:\n\n> `[prefisso]nome`\n\nFacile, vero?\n\n### Accessibilità // ???\n\nPer ***accessibilità*** si intende da dove puoi richiamare una variabile, e la sua durata di vita. Conoscere la sua accessibilità può aiutare di molto nella creazione della tua tag!\n\nUn altro modo per guardare l'accessibilità è il luogo dove le variabili sono *memorizzate*. Ad esempio, le variabili locali sono memorizzate nella tag stessa, mentre le variabili d'autore sono memorizzate nell'utente che ha creato la tag.\n\nEcco l'elenco delle varie accessibilità, dalle più piccole alle più grandi.\n\n\n#### Accessibilità **temporanea**\n> Senza prefisso\n\nLe variabili temporanee sono le variabili più basilari e più utilizzate, dato che hanno l'accessibilità più bassa. Queste variabili non sono *mai memorizzate del database*, e cessano di esistere dopo che la tag è stata eseguita. Dato ciò, sono le più veloci da usare.\n\nUsa le variabili temporanee per cose che non hanno bisogno di essere persistenti nei vari usi.\n\n-- NOT YET FINISHED --"
        },
        "arrays": {
            "title": "Arrays",
            "desc": "## Gli array\n\nGli array sono una struttura dei dati estremamente utile. Nell'essenza, un'array è una lista di oggetti. Sono usati similarmente ai subtag, però con le parentesi quadre `[]` anzichè le parentesi graffe `{}`.\n\nCi sono vari subtag dedicate all'uso e manipolazione degli array. Consulta la classe `Array` per ulteriori dettagli.\n\n### Sintassi\n> `[oggetto;oggetto;oggetto]`\n\n### Indici\n\nGli array sono messi in ordine. Ogni elemento nell'array è assegnato un **indice**, che è la posizione dell'elemento nell'array.\n\nLa cosa più importante da sapere sugli array è che sono **indicizzate da 0**. Questo vuol dire che gli indici partono da 0 anzichè da 1. Ecco un'array di esempio:\n```\nIndice: 0 1 2 3 4\n-----------------------\nValori: [1;2;3;4;5]\n```\nIl primo elemento, `1`, ha un indice di `0`. Similarmente, l'elemento `4` ha un indice di `3`. Potrebbe confondere all'inizio, ma è semplice quando ci si abitua."
        }
    },
    "subtags": {
        "components": {
            "argument": "Argomenti:",
            "named": "Supporta gli argomenti con nome",
            "unnamed": "**Non** supporta gli argomenti con nome",
            "array": "Supporta le array",
            "staff": "Richiede che l'autore è staff",
            "noimplicit": "Non supporta le classi implicite"
        },
        "referdocs": "Consultare la [documentazione](/bbtag) per ulteriori istruzioni sull'uso."
    },
    "commands": {
        "title": "Comandi",
        "desc": "blargbot ha commandi numerosi. Per default, blargbot risponde ai prefissi `b!`, `blargbot` e le menzioni (`@blargbot`). Puoi aggiungere altri prefissi per sia te stesso che il server.\n\nAlcuni comandi possono essere usati soltanto dai membri definiti come staff. Puoi also impostare le restrizioni di uso di ogni comando singolarmente.\n\nAlcuni comandi hanno requisiti di permessi speciali per poter essere eseguiti, per esempio il caricamento delle immagini. Assicuratevi che il bot abbia i permessi giusti prima di eseguire un comando.\n\n## Argomenti\n- `<>` denota un argomento requisito\n- `[]` denota un argomento opzionale\n- `...` denota un argomento ripetuto\n\n### Contrassegni\nAlcuni comandi possono utilizzare dei contrassegni in maniera riga di comando. Tutti i contrassegni sono divisi in codici (prefissi da `-`) e parole (prefisse da `--`). I contrassegni possono essere provveduti in ogni ordine, ma devono essere dopo gli argomenti normali.\n\nPer esempio, se un comando accetta un input utente, potresti usare `-u` o `--user`.\n```\nb!command -u @user#1234\nb!command --user @user#1234\n```\nPuoi anche inserire più contrassegni in un codice. Per esempio, `-flag test` attiva i contrassegni `-f`, `-l`, `-a` e da il contenuto 'test' a `-g`.",
        "components": {
            "usage": "Utilizzo:",
            "flags": "Contrassegni:",
            "aliases": "Alias:",
            "subcommands": "Sub-comandi:"
        }
    },
    "dashboard": {
        "userheader": "Impostazioni degli utenti",
        "guildheader": "Impostazioni del server",
        "notauthed": "### Siamo spiacenti, non puoi accedere a questa pagina\n\nEsegui il login per utilizzare il pannello di amministrazione.",
        "user": {
            "dmerrors": "Errori in messaggi diretti"
        }
    }
}
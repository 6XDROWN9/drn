{
    "language": "Английский",
    "header": {
        "login": "Войти",
        "logout": "Выйти",
        "commands": "Команды",
        "bbtag": "BBTag",
        "subtags": "Подтеги",
        "dashboard": "Панель состояния"
    },
    "generic": {
        "loading": "Загрузка",
        "collapse": "Скрыть всё",
        "expand": "Раскрыть всё",
        "search": "Поиск...",
        "noresults": "Упс! Ничего не найдено.",
        "resultsfound": "Результаты поиска:"
    },
    "index": {
        "desc": "blargbot это многофунциональный бот Дискорда, призванный предоставлять качественные команды и сервисы, включая логи чата и глубокую систему пользовательских команд.",
        "commands": {
            "title": "Команды",
            "desc": "blargbot снабжен многочисленными командами, которые задокументированы и собраны в категории для Вашего удобства."
        },
        "bbtag": {
            "title": "BBTag",
            "desc": "blargbot имеет сложную систему тегов BBTag, которую вы можете использовать для создания своих команд."
        },
        "customization": {
            "title": "Настройка",
            "desc": "Мы понимаем, что не каждая гильдия является одинаковой, поэтому blargbot имеет обширные настройки. Вы можете точно контролировать, какие роли могут использовать те или иные команды, назначать пользовательские префиксы, и даже сменить язык отображения!"
        },
        "moderation": {
            "title": "Модерация",
            "desc": "Need something to moderate your chat? blargbot is equiped with many moderation utilities, from basic operations like banning and muting, to more advanced stuff like chatlogging or automatic censoring."
        },
        "opensource": {
            "title": "Открытый исходный код",
            "desc": "Обмен - это забота! blargbot имеет открытый исходный код под лицензией GNU AGPLv3. Можно взглянуть и изучить, как все работает. Если же вы используете мой код в своих проектах, вы обязаны указать меня соавтором. Смотрите лицензию для доп. информации."
        },
        "suggestions": {
            "title": "Открытый для предложений",
            "desc": "Есть что предложить? Я буду рад услышать это! Нашли ошибку? Я также хочу это знать! Вы можете предлагать мне что угодно, используя команду `suggest`, присоединившись к моему серверу, или оставляя заявку."
        }
    },
    "bbtag": {
        "main": "# BBTag\n> Не путать с BBCode!\n\nBBTag - это язык программирования, основанный на шаблонах, созданный чтобы обеспечить мощную основу для создания продвинутых команд.\n\n### Терминология\n- `тег` - это блок кода BBTag, который может быть тегом или пользовательской командой.\n- A `подтег` это компонент BBTag. Продвинутые теги сделаны из множества подтегов.\n- Класс - это группа подтегов.",
        "subtags": {
            "title": "Подтеги",
            "desc": "## Подтеги\n\nПодтеги - это основные кирпичики BBTag. Они выполняют динамические функции, неважно что это, получение имени пользователя или математичесие вычисления. Давайте посмотрим на подтег:\n```\n{math.randint;1;10}\n```\nКогда выполнилось, вывод может быть таким:\n```\n6\n```\nКак вы видите, подтег`math.randint`возвращает случайное целое число в заданном диапазоне.\n\n### Строение подтега\n\nПодтег состоит из различных компонентов. Синтаксис может выглядеть так:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nОх, хорошо. Это слегка непонятно, но потерпите!\n\n#### Классы\n\n> `[class.]name`\n\nПодтеги разделены по группам, названными **классами**. Каждый класс создан для определенных целей. Например, класс `math` может содержать подтеги для работы с числами. Аналогично, класс `user` может содержать подтеги для получения информации о пользователе. Классы организуют систему.\n\nВо время использования подтега, предпочитаемое использование может быть `{class.name}`. Это повышает читаемость. Однако, явное указание класса зачастую необязательно. BBTag знает, что `{math.randint}` и `{randint}` одни и те же подтеги. Это названо **неявным классифицированием**. Исключение составляет класс `general`, который должен использоваться *без* явных классов.\n\nОднако, вам следует быть осторожным с неявным классифицированием! Иногда, подтеги могут иметь одинаковые имена, но разные классы. Например, `{user.id}` и `{channel.id}` имеют подтеги с одинаковым именем `id`. Если вы попытаетесь использовать неявное классифицирование, код вернет ошибку!\n\n#### Перенаправление\n\n> `[![var]]`\n\nПеренаправление это функция, позволяющая перенаправить вывод в переменную или в никуда. Это поможет очистить ваш код.\n\nНапример, если по какой-либо причине вы не хотите получать вывод от подтега, добавьте `!` после его имени, чтобы заглушить его. Следующие строки аналогичны этому:\n```\n{void;{math.randint;1;10}}\n{math.randint!;1;10}\n```\nЕсли вы хотите ранить вывод в переменной, добавьте `!variableName` после имени подтега. Следующий код аналогичен вышеприведенному:\n```\n{set;randomInteger;{math.randint;1;10}}\n{math.randint!randomInteger;1;10}\n```\nПеренаправление вывода немного быстрее, чем выполнение всего синтаксиса.\n\n#### Параметры\n\n> `[;args]...`\n\nВы можете передавать параметры в подтеги. Они разделены точкой с запятой `;`. Параметры отличаются от подтега к подтегу, а документация к ним может быть найдена на странице подтега.\n\n##### Параметры с именами\n\n> `=<namedArgs>...`\n\nОбычно, порядок указанных параметров важен. Однако, вы можете использовать имена вместо порядка. Это выполняется использованием `=` знака вместо точки с запятой, и затем указывая имя-значение, в формате `{*key;value}`.\n\nНапример, использование`{math.randint}` это `{math.randint;min;max}`. Имена параметров `min` and `max` соответственно. Следующие примеры аналогичны:\n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nВы не можете использовать параметры с именем и без имени в одном подтеге."
        },
        "variables": {
            "title": "Переменные",
            "desc": "## Переменные\n\nBBTag включает различные типы переменных, каждая переменная с разной целью. Эти переменные могут быть использованы для бесчисленных операций и функций.\n\n### Имена\n\nИмя переменной состоит из двух частей: `префикс` и `имя`. Пример:\n\n> `[prefix]name`\n\nПросто, не так ли?\n\n### Контекст\n\n**Префикс* относится к тому, откуда вы можете использовать переменную, и как долго. Зная, какой контекст использовать может значительно помочь в создании тега!\n\nДругой взгляд на префикс это место, где они *хранятся*. Например, локальные переменные хранятся в самом теге, тогда как переменные автора принадлежат пользователю, который создал тег.\n\nДавайте пройдемся по всем префиксам переменных.\n\n#### **Временный** префикс\n> Без префикса\n\nВременные переменные самые основные и самые используемые, так как они не имеют контекста. Такие переменные *никогда не хранятся в базе данных*, и перестают существовать после завершения тега. Таким образом, они самые быстрые в использовании.\n\nИспользуйте временные переменные для вещей, которым не надо быть постоянными между использованиями.\n\n#### **Локальный** префикс\n> Префикс: `~`\n\nЛокальные переменные доступны тегу, который их создал. Они выполняются так же, как и временные переменные, за исключением того, что они остаются постоянными между использованиями.\n\nЛокальные переменные хранятся в самом теге.\n\n#### **Серверный** префикс\n> Префикс: `_`\n\nСерверные переменные используются только на сервере, где они были созданы. Они больше всего подходят для создания пользовательских команд, так как любая команда на сервере использует одинаковое пространство, независимо от автора.\n\nСледует отметить, что теги и команды *имеют* разное пространство переменных, поэтому случайные теги не вмешаются с данными команд.\n\nСерверные переменные хранятся на сервере, где был выполнен тег.\n\n#### **Авторский** префикс\n\nАвторские переменные могут быть доступны из любого другого тега, имеющего одинакового автора. Они больше всего подходят для публичных тегов. Это означает, что это личная переменная которую вы можете использовать для всех ваших тегов. \n\nАвторские переменные принадлежат автору тега.\n\n#### **Общий** префикс\n**ЗАМЕТКА**: Находится в разработке.\n> Префикс: `&<имя>&`\n\nОбщие переменные немного сложнее. Они выполняются на основе динамических пулов переменных, которые относятся к тем или и иным кластерам тега. Намеренное использование общих переменных предназначено для множества пользователей для создания различных тегов, которые используют одинаковые переменные.\n\nИспользование:\n1. Множество пользователей создают разные теги.\n2. Один из пользователей создает кластер тега с указанным именем (напр. `test`)\n3. Этот пользователь добавляет каждый из созданных тегов в кластер.\n4. Далее каждый тег имеет доступ к переменным кластера, используя имя кластера как префикс (напр. `&test&`)\n\nТак, в этом примере, общая переменная `apple` будет доступна с именем `&test&apple`."
        },
        "arrays": {
            "title": "Массивы",
            "desc": "## Массивы\n\nМассивы очень полезная структура данных. В чистом виде, массив это список элементов. Их использование схоже с подтегами в квадратных скобках `[]` вместо фигурных `{}`.\n\nСуществует несколько подтегов для использования и манипулирования массивами. См. класс `Array` для доп. информации.\n\n### Синтаксис\n> `[item;item;item]`\n\n### Индексы\n\nМассивы упорядочены. Каждый элемент в массиве имеет **индекс**, которая является позицией элемента в массиве.\n\nСамая важная вещь в массиве, это то что они **имеют 0-индекс**. Это значит, что индексы начинаются с нуля, а не с 1. Давайте посмотрим на пример массива:\n```\n Индекс:  0 1 2 3 4\n-------------------\nЗначения: [1;2;3;4;5]\n```\nПервый элемент, `1`, имеет индекс `0`. Аналогично, элемент `4` имеет индекс `3`. Сперва это может показаться запутанным, но станет понятным, как только вы привыкнете."
        }
    },
    "subtags": {
        "components": {
            "argument": "Параметры:",
            "named": "Поддерживает параметры с именем",
            "unnamed": "**Не** поддерживает именованные аргументы",
            "array": "Поддерживает массивы",
            "staff": "Требует, чтобы автор был персоналом сервера",
            "noimplicit": "Не поддерживает неявное классицирование"
        },
        "referdocs": "Пожалуйста ознакомьтесь с [документацией](/bbtag) для инструкций по использованию."
    },
    "commands": {
        "title": "Команды",
        "desc": "",
        "components": {
            "usage": "",
            "flags": "",
            "aliases": "",
            "subcommands": ""
        }
    },
    "dashboard": {
        "userheader": "",
        "guildheader": "",
        "notauthed": "",
        "user": {
            "dmerrors": ""
        }
    }
}
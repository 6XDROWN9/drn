{
    "specs": {
        "lang": "Tiếng Việt",
        "contributors": [
            "216783784832532480"
        ]
    },
    "comments": [
        "This is a locale file for blargbot.",
        "For contribution, please use the following guidelines:",
        "1. Arguments are passed into templates using {{name}}. Do not modify these.",
        "2. Templates are used in templates by using [[path.to.key]]. Do not modify these.",
        "3. All commands must contain an 'info' and 'usage' property.",
        "4. For random outputs, terms are placed in a '.list' context. Each random output is specified on a new line. You may contribute random outputs as needed.",
        "5. Terms should end with the same punctuation as in the en_US reference.",
        "6. For credit, put your Discord ID (or desired name) on a new line in the `contributors` term. IDs will get parsed to whatever your username/discrim are.",
        "7. Keep translations civil.",
        "Thank you!"
    ],
    "generic": {
        "output": "{{output}}",
        "nooutput": "Thôi rồi đầu ra biến đi đâu rồi...",
        "queryexpire": "Lựa chọn sẽ mất hiệu lực trong {{length}} phút.",
        "resolveuser": {
            "nousers": "Xin lỗi, nhưng mình không tìm thấy người dùng đó.",
            "pickuser": "Có {{length}} người dùng trong danh sách! Chọn một trong số đó để tiếp tục."
        },
        "resolverole": {
            "noroles": "Không thể tìm thấy role bạn cần.",
            "pickrole": "Có {{length}} roles được tìm thấy trong danh sách! Chọn một trong số đó để tiếp tục."
        },
        "resolvechannel": {
            "nochannels": "Sorry, mình không tìm thấy kênh đó.",
            "pickchannel": "Có {{length}} kênh được tìm thấy trong danh sách! Chọn một trong số đó để tiếp tục."
        },
        "edited": "đã chỉnh sửa",
        "created": "đã được tạo",
        "deleted": "đã được xoá",
        "menu": {
            "choices": "Trang {{page}}/{{max}}"
        },
        "nochange": "Không có thay đổi.",
        "commandhelp": "**Command Name**: **__{{name}}__**\n\n**__Usage__**\n```{{usage}}```\n**__Info__**\n{{info}}\n\n**__Aliases__**\n{{aliases}}",
        "example": {
            "id1": "111111111111111111",
            "id2": "222222222222222222",
            "id3": "333333333333333333"
        },
        "test": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
    },
    "menu": {
        "cancel": {
            "name": "Hủy",
            "description": "Đóng menu này."
        },
        "confirm": {
            "name": "Xác định",
            "description": "Xác nhận menu này."
        }
    },
    "emote": {
        "check": ":white_check_mark:",
        "x": ":x:",
        "okhand": ":ok_hand:"
    },
    "error": {
        "keyundef": "Làm gì có ngôn ngữ này? '{{key}}'.",
        "memberundef": "Không có thành viên nào là '{{member}}'.",
        "userundef": "Không thấy người dùng: '{{user}}`.",
        "channelundef": "Không tìm thấy kênh: '{{channel}}'.",
        "roleundef": "Không thấy role: '{{role}}'.",
        "pleasereport": "Nếu bạn nghi ngờ rằng đây là lỗi, xin hãy báo cáo cho chúng tôi!",
        "generic": "Có gì đó không ổn...\n```\n{{message}}\n```\n[[error.pleasereport]]",
        "messagetoolong": "Thôi rồi Lượm ơi! Mình knông thể gửi tin nhắn này được vì nó quá dài. [[error.pleasereport]]",
        "notenoughparams": "Chưa đủ giá trị cần nhập! Gõ theo cú pháp `{{prefix}}help {{name}}` để biết thêm thông tin chi tiết.\n\nCần `{{expected}}` giá trị, thay vào đó mình chỉ nhận được `{{received}}`.",
        "tag": {
            "notfound": "'{{tag}}' không tồn tại.",
            "toomanyargs": "Quá nhiều đơn vị (nhận:{{received}} cần:{{expected}})",
            "toofewargs": "Không đủ đơn vị (nhận:{{received}} cần:{{expected}})",
            "isnan": "Cần '{{arg}}' là chữ số, nhưng nhận được '{{value}}'",
            "maxlessthanmin": "Giá trị Max phải lớn hơn Min",
            "ccommandonly": "'{{tag}}' chỉ có thể sử dụng cho ccommands",
            "authorstaff": "{{author}} phải là mod mới được dùng '{{tag}}'",
            "noperms": "Bot không được ủy quyền '{{perm}}' để thực hiện tag '{{tag}}'",
            "toolow": "Bot không thể thực hiện tag '{{tag}}' vì nó là cấp dưới của '{{target}}'",
            "unclosed": "Dấu ngoặc đầu không khớp [{{column}}:{{row}}]",
            "unopened": "Dấu ngoặc cuối không khớp [{{column}}:{{row}}]",
            "invalidradix": "Cơ số phải trong khoảng 2 tới 36, nhưng nhận được '{{radix}}'",
            "notanarray": "Biến '{{name}}' không phải là mảng (Nhận được '{{value}}')",
            "notbool": "Biến '{{name}' không thuộc phép toán luận (Nhận được '{{value}}')"
        }
    },
    "command": {
        "general": {
            "ping": {
                "info": "Pong!\nXác định thời gian lệnh được nhận từ máy chủ.",
                "usage": "ping",
                "randmsg": [
                    "Sự tồn tại không là hiện thực.",
                    "Bạn không sở hữu một cơ thể vĩnh cửu, một ngày nào đó bạn sẽ tan biến khỏi thế gian này.",
                    "Không vấn đề gì.",
                    "Bạn đi đâu vậy?",
                    "Không có gì ở ngoài đâu.",
                    "Bạn không hề biết rằng, bạn đang cô đơn trong một vũ trụ rộng vô tận.",
                    "Sự thật trái ngược.",
                    "Bỏ đi mọi thứ.",
                    "Sự tồn tại của bạn thật đáng thương.",
                    "Chúng ta đều đã chết.",
                    "Meo.",
                    "Sự sợ hãi là tự do.",
                    "Sự chinh phục là giải phóng.",
                    "Mâu thuẫn là sự thật.",
                    "Bạn có muốn ký một hợp đồng không?",
                    "Hãy để nó đi, và tiếp tục.",
                    "Làm sao để một con chim biết bay? Dạy nó đi.",
                    "Như bạn thấy, mọi thứ không tệ như bạn nghĩ. Nó chỉ quá tệ để nghĩ như thế.",
                    "Nhìn cái giề?",
                    "Thật là ngu. Ngu theo nghĩa bóng.",
                    "Thôi mình phắn đê."
                ],
                "final": "Pong! ({{time}}ms)"
            },
            "brainfuck": {
                "info": "Giải mã brainfuck.",
                "usage": "brainfuck <mã>",
                "flags": {
                    "p": "Mở danh sách các con trỏ sau khi giải mã.",
                    "i": "Xác định giá trị đầu vào cho `,`"
                }
            },
            "cat": {
                "info": "Tải hình ảnh một con mèo dễ thương (Chắc thế).",
                "usage": "cat"
            },
            "ship": {
                "info": "Ghép đôi hai người và cho ra tên ship.",
                "usage": "ship <người dùng 1> <người dùng 2>",
                "final": "Tên ship của các bạn là **{{name}}**!",
                "notenough": "Bạn phải nói cho mình biết ai với ai để rồi mình còn ship chớ!"
            },
            "tag": {
                "info": "Tag là một hệ thống các lệnh công cộng mà bất kỳ ai cũng có thể tạo hoặc thực thi bằng cách sử dụng ngôn ngữ BBTag.\n\n**Các lệnh con**:\n{{subcommands}}\n\nĐể biết thêm thông tin về một lệnh con, nhập `b!t help <subcommand>`\nĐể biết thêm thông tin về ngôn ngữ BBTag, truy cập <https://blargbot.xyz/tags>.\nBằng cách tạo một Tag mới, hãy xác nhận rằng bạn đồng ý với các Điều khoản về Dịch vụ (<https://blargbot.xyz/tags/tos>).",
                "usage": "tag <tên | lệnh con> [giá trị]",
                "dontown": "[[emote.x]] Bạn không sở hữu tag đó!",
                "alreadyexists": "[[emote.x]] Tag đó đã tồn tại rồi!",
                "notag": "[[emote.x]] Không có tag nào tồn tại có tên như thế cả.",
                "tagset": "[[emote.check]] Tag `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] Tag `{{old}}` đã được đổi tên thành `{{new}}`!",
                "raw": "Đây là dòng lệnh cho tag {{name}}:\n```{{code}}```",
                "testoutput": "Đầu ra:\n\n{{output}}",
                "subcommand": {
                    "set": {
                        "usage": "tag set <name> <content>",
                        "info": "Creates or edits a tag with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "tag delete <name>",
                        "info": "Deletes a tag that you own."
                    },
                    "rename": {
                        "usage": "tag rename <name> <new name>",
                        "info": "Renames a tag that you own."
                    },
                    "raw": {
                        "usage": "tag raw <name>",
                        "info": "Gets the raw code of a tag."
                    },
                    "info": {
                        "usage": "tag info <name>",
                        "info": "Displays information about a tag."
                    },
                    "transfer": {
                        "usage": "tag transfer <name> <user>",
                        "info": "Transfers a tag to the specified user. Variables will not be transferred."
                    },
                    "top": {
                        "usage": "tag top",
                        "info": "Displays the tags that have been the most favorited."
                    },
                    "author": {
                        "usage": "tag author <name>",
                        "info": "Displays the author of a tag."
                    },
                    "search": {
                        "usage": "tag search <query>",
                        "info": "Searches for a tag with a name containing your query."
                    },
                    "list": {
                        "usage": "tag list [@user]",
                        "info": "Lists all the tags, or optionally all the tags created by a specific user."
                    },
                    "favorite": {
                        "usage": "tag favorite <name>",
                        "info": "Favorites the specified tag."
                    },
                    "report": {
                        "usage": "tag report <name>",
                        "info": "Reports a tag for violating the ToS. Please use responsibly."
                    },
                    "test": {
                        "usage": "tag test <code>",
                        "info": "Executes the given code in a test environment."
                    },
                    "help": {
                        "usage": "tag help [subcommand]",
                        "info": "Displays this!"
                    },
                    "docs": {
                        "usage": "tag docs [subtag]",
                        "info": "Gives a link to the BBTag documentation, or provides information about a specific subtag."
                    }
                },
                "subcommandnotfound": "Couldn't find a subcommand with the name `{{subcommand}}`.",
                "transferprompt": "{{target}}, {{user}} wants to transfer ownership of the tag `{{tag}}` to you. Do you accept?\nThis will not transfer variables.",
                "nobots": "[[emote.x]] You cannot transfer a tag to a bot!",
                "transfercancelled": "[[emote.x]] The transfer has been cancelled.",
                "transfercomplete": "[[emote.check]] {{user}} now owns the tag `{{tag}}`.",
                "taginfo": "__**Tag | {{name}}**__\nAuthor: **{{author}}**\nLast Modified: **{{lastModified}}**\nIt has been used a total of **{{uses}} times**!\nIt has been favorited **{{favourites}} times**!"
            },
            "ccommand": {
                "info": "CCommands are a system of custom commands that moderators can create for their users, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit <https://blargbot.xyz/tags>.",
                "usage": "cc <subcommand> [args]",
                "subcommand": {
                    "set": {
                        "usage": "cc set <name> <content>",
                        "info": "Creates or edits a custom command with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "cc delete <name>",
                        "info": "Deletes a custom command."
                    },
                    "rename": {
                        "usage": "cc rename <name> <newName>",
                        "info": "Renames a custom command."
                    },
                    "author": {
                        "usage": "cc author <name>",
                        "info": "Returns the author of the custom command."
                    },
                    "transfer": {
                        "usage": "cc transfer <name> <user>",
                        "info": "Transfers ownership of a custom command to somebody else. Must be consensual."
                    },
                    "list": {
                        "usage": "cc list",
                        "info": "Lists the custom commands on the guild."
                    },
                    "test": {
                        "usage": "cc test",
                        "info": "Executes code in the context of your account."
                    },
                    "help": {
                        "usage": "cc help [subcommand]",
                        "info": "Displays this!"
                    }
                },
                "dontown": "[[emote.x]] You don't own that custom command!",
                "notag": "[[emote.x]] There is no custom command with that name.",
                "tagset": "[[emote.check]] Custom command `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The custom command `{{old}}` has been renamed to `{{new}}`",
                "raw": "The code for {{name}} is:\\n```{{code}}```",
                "alreadyexists": "A custom command with that name already exists.",
                "testoutput": "Test Output:\\n\\n{{output}}"
            },
            "locale": {
                "info": "Sets what locale messages will be sent in.",
                "usage": "locale",
                "set": "Your locale has been set to {{locale}}!",
                "list": "Your current locale is: {{current}}\n\nPlease select which locale you want to use."
            }
        },
        "admin": {
            "mod": {
                "setrole": "Roles dành cho mod đã được cập nhật.",
                "rolequery": "Select the roles that will be considered moderator roles. Users with these roles will be able to use admin commands.",
                "info": "Sets what users/roles are considered to be staff.",
                "usage": "mod <subcommand>",
                "subcommand": {
                    "user": {
                        "usage": "mod user <add | remove> <user>...",
                        "info": "Adds or removes the specified user(s) to the staff list."
                    },
                    "role": {
                        "usage": "mod user role",
                        "info": "Brings up a dialog to select or deselect roles."
                    }
                }
            }
        },
        "image": {
            "cat": {
                "info": "Gives you a lovely dear sweet precious kitty.\nD'awww!",
                "usage": "cat"
            }
        }
    },
    "tag": {
        "comment": {
            "desc": "Specifies an area that will be ignored from parsing.",
            "example": {
                "in": "This will be shown {//;This won't be}",
                "out": "This will be shown"
            }
        },
        "void": {
            "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
            "example": {
                "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                "out": "This will be shown  but this will be set"
            }
        },
        "randint": {
            "desc": "Returns a random integer between the provided range. `min` defaults to `0`.",
            "example": {
                "in": "One: {randint;5}, two: {randint;10;20}",
                "out": "One: 2, two: 17"
            }
        },
        "array": {
            "filter": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array only containing the elements where the result of the iteration was `true` or `1`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{filter;array;{logic;{get;i};<;3}}",
                    "out": "[1;2]"
                }
            },
            "foreach": {
                "desc": "Iterates through an array, setting the local variable `i` to the current element. If `varName` is provided, sets that variable instead.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.foreach;array;Element:{get;i}{newline}}",
                    "out": "Element:1\nElement:2\nElement:3\nElement:4\nElement:5"
                }
            },
            "get": {
                "desc": "Gets an element from an array at the position `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\nElement at index 3: {array.get;array;3}",
                    "out": "Element at index 3: 4"
                }
            },
            "isarray": {
                "desc": "Returns true if the provided element is an array, and false otherwise. You cannot use variable names.",
                "example": {
                    "in": "{set;arr1;[this;is;an;array]}\n{set;arr2;this is not an array}\narr1: {array.isarray;{get;arr1}}\narr2: {array.isarray;{get;arr2}}",
                    "out": "arr1: true\narr2: false"
                }
            },
            "join": {
                "desc": "Joins an array with the provided `delimiter`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.join;array;,{space}}",
                    "out": "1, 2, 3, 4, 5"
                }
            },
            "length": {
                "desc": "Returns the length of the given array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.length;array}",
                    "out": "5"
                }
            },
            "map": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array where each element is the result of each iteration.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.map;array;{math;i;*;2}}",
                    "out": "[2;4;6;8;10]"
                }
            },
            "pop": {
                "desc": "Removes and returns the last element of the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.pop;array}\n{get;array}",
                    "out": "5\n[1;2;3;4]"
                }
            },
            "push": {
                "desc": "Pushes an element to the end of an array. Returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.push;array;6}",
                    "out": "[1;2;3;4;5;6]"
                }
            },
            "set": {
                "desc": "Sets an element on the array at the specified `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;8;5]}\n{get;array}\n{array.set;array;3;4}\n{get;array}",
                    "out": "[1;2;3;8;5]\n\n[1;2;3;4;5]"
                }
            },
            "shift": {
                "desc": "Removes and returns the first element in the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.shift;array}\n{get;array}",
                    "out": "1\n[2;3;4;5]"
                }
            },
            "slice": {
                "desc": "Returns a section of the array, including the `start` index and excluding the `end` index. If `end` is unspecified, defaults to all remaining elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{slice;array;3}\n{slice;array;2;4}",
                    "out": "[4;5]\n[3;4]"
                }
            },
            "sort": {
                "desc": "Sorts and returns an array, by default in ascending order.\n\nIf `function` is provided, sorting will occur based on the result of executing said function. This will set two local variables: `a` (or `varNameOne`) and `b` (or `varNameTwo`). \n\nThe function must return a number. If the number is greater than 0, `a` will be considered greater than `b`. If the number is lower than 0, `b` will be considered greater than `a`. Any non-number result will be converted to 0, where both elements are equal.",
                "example": {
                    "in": "{set;array;[2;5;1;6;3;7]}\n{sort;array}\n{sort;array;{math;b;-;a}}",
                    "out": "[1;2;3;5;6;7]\n[7;6;5;3;2;1]"
                }
            },
            "splice": {
                "desc": "Starting at the position `start`, removes `deleteCount` elements from the array and adds the remaining `items` at that position. Returns the removed elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.splice;array;2;2;inserted;items}\n{get;array}",
                    "out": "[3;4]\n[1;2;inserted;items;5]"
                }
            },
            "split": {
                "desc": "Splits the `text` by the `delimiter`, returning the new array.",
                "example": {
                    "in": "{array.split;This will be split by spaces;{space}}",
                    "out": "[This;will;be;split;by;spaces]"
                }
            },
            "unshift": {
                "desc": "Inserts `value` at the beginning of the array, and returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.unshift;array;0}",
                    "out": "[0;1;2;3;4;5]"
                }
            }
        },
        "channel": {
            "id": {
                "desc": "Returns the ID of the current or specified channel.",
                "example": {
                    "in": "{channel.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "nsfw": {
                "desc": "Returns whether the current or specified channel is NSFW.",
                "example": {
                    "in": "{channel.nsfw}",
                    "out": "false"
                }
            },
            "name": {
                "desc": "Returns the name of the current or specified channel.",
                "example": {
                    "in": "{channel.name;#general}",
                    "out": "general"
                }
            },
            "position": {
                "desc": "Returns the position of the current or specified channel.",
                "example": {
                    "in": "{channel.position}",
                    "out": "1"
                }
            },
            "topic": {
                "desc": "Returns the topic of the current or specified channel (text only).",
                "example": {
                    "in": "{channel.topic}",
                    "out": "This is an example channel topic."
                }
            },
            "type": {
                "desc": "Returns the type of the current or specified channel (returns \"text\" or \"voice\").",
                "example": {
                    "in": "{channel.type}",
                    "out": "text"
                }
            }
        },
        "general": {
            "clean": {
                "desc": "Cleans the provided text by shrinking all whitespace.",
                "example": {
                    "in": "{clean;  one\n\n                two\n  \n\n    three}",
                    "out": "one\ntwo\nthree"
                }
            },
            "//": {
                "desc": "Specifies an area that will be ignored from parsing",
                "example": {
                    "in": "This will be shown {//;This won't be}",
                    "out": "This will be shown"
                }
            },
            "get": {
                "desc": "Returns the stored variable with the supplied name. Variable prefixes can modify the pool in which to search.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "set": {
                "desc": "Sets the stored variable with the supplied name to the supplied value. Variable prefixes can modify the pool in which to set.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "trim": {
                "desc": "Removes whitespace before and after the provided text. Consider using the {clean} tag to remove whitespace within the text.",
                "example": {
                    "in": "{trim;{space;5}Hello{space;5}}",
                    "out": "Hello"
                }
            },
            "void": {
                "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
                "example": {
                    "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                    "out": "This will be shown  but this will be set"
                }
            },
            "newline": {
                "desc": "Returns the specified number of newlines, defaulting to 1.",
                "example": {
                    "in": "One{newline;5}Two",
                    "out": "One\n\n\n\n\nTwo"
                }
            },
            "space": {
                "desc": "Returns the specified number of spaces, defaulting to 1.",
                "example": {
                    "in": "One{space;5}Two",
                    "out": "One     Two"
                }
            }
        },
        "guild": {
            "createdat": {
                "desc": "Returns when the current guild was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{guild.createdat}",
                    "out": "1466379030450"
                }
            },
            "channels": {
                "desc": "Returns the channels in the current guild as an array.",
                "example": {
                    "in": "{guild.channels}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "icon": {
                "desc": "Returns the URL of the current guild's icon.",
                "example": {
                    "in": "{guild.icon}",
                    "out": "https://cdn.discordapp.com/icons/194232473931087872/2e9d173fc1461ff9e4672cb8782978e7.png?size=512"
                }
            },
            "id": {
                "desc": "Returns the ID of the current guild.",
                "example": {
                    "in": "{guild.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "name": {
                "desc": "Returns the name of the current guild.",
                "example": {
                    "in": "{guild.name}",
                    "out": "Cat Town"
                }
            },
            "owner": {
                "desc": "Returns the ID of the guild's owner.",
                "example": {
                    "in": "{guild.owner}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "region": {
                "desc": "Returns the region the current guild is in.",
                "example": {
                    "in": "{guild.region}",
                    "out": "us-west"
                }
            },
            "roles": {
                "desc": "Returns an array of roles in the current guild.",
                "example": {
                    "in": "{guild.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            }
        },
        "logic": {
            "if": {
                "desc": "If the `value` is equal to `true` or `1`, executes `then`.\nIf the `value` is equal to `false` or `0`, executes `else`.\nOtherwise, throws an error.\n\nUse this with the {logic} tag.",
                "example": {
                    "in": "{if;true;This will be shown.;This won't be shown.}",
                    "out": "This will be shown."
                }
            },
            "logic": {
                "desc": "Does logical operators on the `augend` and `operands`, returning `true` or `false`.\n\nEquivalence Operators:\n - `==` - equal\n - `!=` - not equal\n - `<` - less than\n - `<=` - less than or equal\n - `>` - greater than\n - `>=` - greater than or equal\n - `startswith` - the augend starts with the operand\n - `endswith` - the augend ends with the operand\n - `includes` - the augend includes the operand\n\nLogical Operators:\n - `&&` - returns true if the augend and operand are both true\n - `||` - returns true if either the augend or operand are true\n - `XOR` - returns true if only one of the augend and operand are true (not both)\n\nOther Operators:\n - `!` - inverts the next operand (true becomes false, etc.)",
                "example": {
                    "in": "{logic;5;==;6}\n{logic;5;!=;6;&&;5;>;6}\n{logic;5;>=;6;||;5;<;6}\n{logic;5;<=;6;xor;true}\n{logic;1234;startswith;12}\n{logic;1234;endswith;34}\n{logic;1234;includes;23}\n{logic;!;true}\n{logic;!;5;!=;5}",
                    "out": "false\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue"
                }
            }
        },
        "math": {
            "abs": {
                "desc": "Returns the absolute value of the provided number (no negatives).",
                "example": {
                    "in": "{math.abs;-3523}",
                    "out": "3523"
                }
            },
            "base": {
                "desc": "Parses the `number` using the provided base `origin` (defaulting to 10), and converts it to base `radix`.",
                "example": {
                    "in": "{math.base;FA;16;10}",
                    "out": "250"
                }
            },
            "ceil": {
                "desc": "Rounds the provided decimal up.",
                "example": {
                    "in": "{math.ceil;1.25}",
                    "out": "2"
                }
            },
            "floor": {
                "desc": "Rounds the provided decimal down.",
                "example": {
                    "in": "{math.floor;1.75}",
                    "out": "1"
                }
            },
            "math": {
                "desc": "Calculates the value of the provided expression using the following operators:\n\n - `^` - exponents\n - `/` - division\n - `*` - multiplication\n - `+` - addition\n - `-` - subtraction\n - `&` - bitwise AND\n - `|` - bitwise OR\n - `XOR` - bitwise XOR\n\nOperators are executed using the Order of Operations (Brackets, Exponents, Division, Multiplication, Addition, Subtraction, Bitwise).\n\nIf an operator isn't specified, it uses the last-used operator (defaulting to addition).\n\nBrackets would be achieved by using another nested {math} tag.\n\nIf an `operand` or `augend` cannot be parsed as a number, a variable with the same name will be retrieved. If the retrieved variable is also not a number, throws an error.",
                "example": {
                    "in": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: {math;1;+;2;^;2;*;3;-;4;/;5}\n\nEquation: 4 + 6 + 8\nAnswer: {math;4;6;8}\n\nEquation: 01001010 | 11000100 & 11111011\n{trim;{set;bin1;{math.base;01001010;2;10}}\n{set;bin2;{math.base;11000100;2;10}}\n{set;bin3;{math.base;11111011;2;10}}\nAnswer: {base;{math;bin1;|;bin2;|;bin3};10;2}}",
                    "out": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: 12.2\n\nEquation: 4 + 6 + 8\nAnswer: 18\n\nEquation: 01001010 | 11000100 & 11111011\nAnswer: 11111111"
                }
            },
            "parsefloat": {
                "desc": "Attempts to parse the given text as a decimal.",
                "example": {
                    "in": "{math.parsefloat;2.5}\n{math.parsefloat;not a number}",
                    "out": "2.5\nNaN"
                }
            },
            "parseint": {
                "desc": "Attempts to parse the given text as an integer.",
                "example": {
                    "in": "{math.parseint;2.5}\n{math.parseint;not a number}",
                    "out": "2\nNaN"
                }
            },
            "randint": {
                "desc": "Returns a random integer between the provided range. `min` defaults to `0`",
                "example": {
                    "in": "One: {randint;5}, two: {randint;10;20}",
                    "out": "One: 2, two: 17"
                }
            },
            "round": {
                "desc": "Rounds the given `number` to the specified decimal `places`, defaulting to 0.",
                "example": {
                    "in": "{math.round;5.125}\n{math.round;5.125;1}\n{math.round;5.125;2}",
                    "out": "5\n5.1\n5.13"
                }
            }
        },
        "message": {
            "id": {
                "desc": "Returns the ID of the executing command message.",
                "example": {
                    "in": "{message.id}",
                    "out": "[[generic.example.id1]]"
                }
            }
        },
        "role": {
            "color": {
                "desc": "Returns the color of the specified role in hexadecimal.",
                "example": {
                    "in": "#{role.color;coolrole}",
                    "out": "#2ECC71"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified role.",
                "example": {
                    "in": "{role.id;coolrole}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "mention": {
                "desc": "Returns a mention of the specified role.",
                "example": {
                    "in": "{role.mention;coolrole}",
                    "out": "@coolrole"
                }
            },
            "name": {
                "desc": "Returns the name of the specified role.",
                "example": {
                    "in": "{role.name;coolrole}",
                    "out": "coolrole"
                }
            },
            "position": {
                "desc": "Returns the position of the specified role.",
                "example": {
                    "in": "{role.position;coolrole}",
                    "out": "5"
                }
            }
        },
        "user": {
            "avatar": {
                "desc": "Returns the avatar URL of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.avatar}",
                    "out": "https://cdn.discordapp.com/avatars/[[generic.example.id1]]/avatarhash.png"
                }
            },
            "createdat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.createdat}",
                    "out": "1444710446104"
                }
            },
            "discrim": {
                "desc": "Returns the discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.discrim}",
                    "out": "1111"
                }
            },
            "fullname": {
                "desc": "Returns the name + discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.fullname}",
                    "out": "person#1111"
                }
            },
            "game": {
                "desc": "Returns the game the specified user is playing, defaulting to the executing user. If the user isn't playing a game, returns nothing.",
                "example": {
                    "in": "{user.game}",
                    "out": "with BBTag!"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "joinedat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, joined the current guild as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.joinedat}",
                    "out": "1466379030499"
                }
            },
            "mention": {
                "desc": "Mentions the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.mention}",
                    "out": "@person"
                }
            },
            "name": {
                "desc": "Returns the name of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.name}",
                    "out": "person"
                }
            },
            "nick": {
                "desc": "Returns the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.nick}",
                    "out": "CoolNickname"
                }
            },
            "roles": {
                "desc": "Returns an array of the roles the specified user has, defaulting to the executing user.",
                "example": {
                    "in": "{user.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "setnick": {
                "desc": "Sets the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.setnick;EvenCoolerNickname}",
                    "out": "(the nickname was set)"
                }
            },
            "status": {
                "desc": "Returns the status of the specified user, defaulting to the executing user. Can return \"online\", \"away\", \"dnd\", or \"offline\".",
                "example": {
                    "in": "{user.status}",
                    "out": "online"
                }
            }
        }
    }
}
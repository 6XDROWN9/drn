{
    "specs": {
        "lang": "English",
        "contributors": [
            "103347843934212096"
        ]
    },
    "comments": [
        "This is a locale file for blargbot.",
        "For contribution, please use the following guidelines:",
        "1. Arguments are passed into templates using {{name}}. Do not modify these.",
        "2. Templates are used in templates by using [[path.to.key]]. Do not modify these.",
        "3. All commands must contain an 'info' property. The 'usage' property is optional, and only contains the arguments after the command name.",
        "4. For random outputs, terms are placed in a '.list' context. Each random output is specified on a new line. You may contribute random outputs as needed.",
        "5. Terms should end with the same punctuation as in the en_US reference.",
        "6. For credit, put your Discord ID (or desired name) on a new line in the `contributors` term. IDs will get parsed to whatever your username/discrim are.",
        "7. Keep translations civil.",
        "Thank you!"
    ],
    "generic": {
        "output": "Output:\n{{output}}",
        "nooutput": "No output...",
        "queryexpire": "This query will expire in {{length}} minutes.",
        "resolveuser": {
            "nousers": "No users found.",
            "pickuser": "{{length}} users were found! Please select one from the list."
        },
        "resolverole": {
            "noroles": "No roles found.",
            "pickrole": "{{length}} roles were found! Please select one from the list."
        },
        "resolvechannel": {
            "nochannels": "No channels found.",
            "pickchannel": "{{length}} channels were found! Please select one from the list."
        },
        "edited": "edited",
        "created": "created",
        "deleted": "deleted",
        "menu": {
            "choices": "Page {{page}}/{{max}}"
        },
        "nochange": "Nothing was changed.",
        "commandhelp": "**Command Name**: **__{{name}}__**\n\n**__Usage__**\n```{{usage}}```\n**__Info__**\n{{info}}\n\n**__Aliases__**\n{{aliases}}",
        "example": {
            "id1": "111111111111111111",
            "id2": "222222222222222222",
            "id3": "333333333333333333"
        },
        "test": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]",
        "querycancelled": "The query has been cancelled.",
        "user": "User",
        "role": "Role",
        "channel": "Channel"
    },
    "menu": {
        "cancel": {
            "name": "Cancel",
            "description": "Close this menu."
        },
        "confirm": {
            "name": "Confirm",
            "description": "Confirms this menu."
        }
    },
    "emote": {
        "check": ":white_check_mark:",
        "x": ":x:",
        "okhand": ":ok_hand:"
    },
    "error": {
        "keyundef": "No such locale entry was found: '{{key}}'.",
        "memberundef": "No such member was found: '{{member}}'.",
        "userundef": "No such user was found: '{{user}}'.",
        "channelundef": "No such channel was found: '{{channel}}'.",
        "roleundef": "No such role was found: '{{role}}'.",
        "pleasereport": "If you think this is an error, please report it!",
        "generic": "Something went wrong!\n```\n{{message}}\n```\n[[error.pleasereport]]",
        "messagetoolong": "Whoops! I tried to send a message that was too long. [[error.pleasereport]]",
        "notenoughparams": "Not enough parameters! Do `{{prefix}}help {{name}}` for more details.\n\nExpected `{{expected}}` parameters, but got `{{received}}` instead.",
        "tag": {
            "notfound": "Subtag '{{tag}}' doesn't exist.",
            "toomanyargs": "Too many args (r:{{received}} e:{{expected}})",
            "toofewargs": "Not enough args (r:{{received}} e:{{expected}})",
            "isnan": "Expected '{{arg}}' to be a number, but received '{{value}}'",
            "maxlessthanmin": "Max must be greater than Min",
            "ccommandonly": "'{{tag}}' may only be used in ccommands",
            "authorstaff": "Author {{author}} must be staff to use '{{tag}}'",
            "noperms": "Bot is lacking permission '{{perm}}' required by tag '{{tag}}'",
            "toolow": "Bot cannot execute '{{tag}}' because it's lower-ranked than '{{target}}'",
            "unclosed": "Unmatched opening bracket [{{column}}:{{row}}]",
            "unopened": "Unmatched closing bracket [{{column}}:{{row}}]",
            "invalidradix": "Radix must be between 2 and 36, but received '{{radix}}'",
            "notanarray": "Variable '{{name}}' is not an array (Received: '{{value}}')",
            "notbool": "Variable '{{name}}' is not a boolean (Received: '{{value}}')",
            "missingarg": "Subtag '{{tag}}' is missing argument: '{{arg}}'",
            "namedunsupported": "Subtag '{{tag}}' does not support named arguments"
        },
        "inputtoolong": "Your input was too long! The maximum characters for this was {{max}}, but you gave {{length}} characters."
    },
    "command": {
        "general": {
            "ping": {
                "info": "Pong!\nFinds the command latency.",
                "usage": "ping",
                "randmsg": [
                    "Existence is a lie.",
                    "You're going to die some day, perhaps soon.",
                    "Nothing matters.",
                    "Where do you get off?",
                    "There is nothing out there.",
                    "You are alone in an infinite void.",
                    "Truth is false.",
                    "Forsake everything.",
                    "Your existence is pitiful.",
                    "We are all already dead.",
                    "Meow.",
                    "Fear is freedom.",
                    "Subjugation is liberation.",
                    "Contradiction is truth.",
                    "Would you like to make a contract?",
                    "Let it go, and move on."
                ],
                "final": "Pong! ({{time}}ms)"
            },
            "brainfuck": {
                "info": "Executes brainfuck code.",
                "usage": "brainfuck <code>",
                "flags": {
                    "p": "Shows a list of pointers after the execution.",
                    "i": "Specifies the input for the `,` operator."
                }
            },
            "cat": {
                "info": "Gets a picture of a cat.",
                "usage": "cat"
            },
            "ship": {
                "info": "Gives you the ship name for two users.",
                "usage": "ship <user1> <user2>",
                "final": "Your shipname is **{{name}}**!",
                "notenough": "You have to tell me who to ship!"
            },
            "tag": {
                "info": "Tags are a system of public commands that anyone can create or execute, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit <https://blargbot.xyz/tags>.\nBy creating a tag, you acknowledge that you agree to the Terms of Service (<https://blargbot.xyz/tags/tos>).",
                "usage": "tag <name | subcommand> [args]",
                "dontown": "[[emote.x]] You don't own that tag!",
                "alreadyexists": "[[emote.x]] A tag with that name already exists!",
                "notag": "[[emote.x]] There is no tag with that name.",
                "tagset": "[[emote.check]] Tag `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The tag `{{old}}` has been renamed to `{{new}}`.",
                "raw": "The code for {{name}} is:\n```{{code}}```",
                "testoutput": "Test Output:\n\n{{output}}",
                "subcommand": {
                    "set": {
                        "usage": "tag set <name> <content>",
                        "info": "Creates or edits a tag with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "tag delete <name>",
                        "info": "Deletes a tag that you own."
                    },
                    "rename": {
                        "usage": "tag rename <name> <new name>",
                        "info": "Renames a tag that you own."
                    },
                    "raw": {
                        "usage": "tag raw <name>",
                        "info": "Gets the raw code of a tag."
                    },
                    "info": {
                        "usage": "tag info <name>",
                        "info": "Displays information about a tag."
                    },
                    "transfer": {
                        "usage": "tag transfer <name> <user>",
                        "info": "Transfers a tag to the specified user. Variables will not be transferred."
                    },
                    "top": {
                        "usage": "tag top",
                        "info": "Displays the tags that have been the most favourited."
                    },
                    "author": {
                        "usage": "tag author <name>",
                        "info": "Displays the author of a tag."
                    },
                    "search": {
                        "usage": "tag search <query>",
                        "info": "Searches for a tag with a name containing your query."
                    },
                    "list": {
                        "usage": "tag list [@user]",
                        "info": "Lists all the tags, or optionally all the tags created by a specific user."
                    },
                    "favorite": {
                        "usage": "tag favourite <name>",
                        "info": "Favourites the specified tag."
                    },
                    "report": {
                        "usage": "tag report <name>",
                        "info": "Reports a tag for violating the ToS. Please use responsibly."
                    },
                    "test": {
                        "usage": "tag test <code>",
                        "info": "Executes the given code in a test environment."
                    },
                    "help": {
                        "usage": "tag help [subcommand]",
                        "info": "Displays this!"
                    },
                    "docs": {
                        "usage": "tag docs [subtag]",
                        "info": "Gives a link to the BBTag documentation, or provides information about a specific subtag."
                    },
                    "setdesc": {
                        "usage": "usage",
                        "info": "info"
                    },
                    "setusage": {
                        "usage": "usage",
                        "info": "info"
                    }
                },
                "subcommandnotfound": "Couldn't find a subcommand with the name `{{subcommand}}`.",
                "transferprompt": "{{target}}, {{user}} wants to transfer ownership of the tag `{{tag}}` to you. Do you accept?\nThis will not transfer variables.",
                "nobots": "[[emote.x]] You cannot transfer a tag to a bot!",
                "transfercancelled": "[[emote.x]] The transfer has been cancelled.",
                "transfercomplete": "[[emote.check]] {{user}} now owns the tag `{{tag}}`.",
                "taginfo": "__**Tag | {{name}}**__\nAuthor: **{{author}}**\nLast Modified: **{{lastModified}}**\nIt has been used a total of **{{uses}} times**!\nIt has been favourited **{{favourites}} times**!",
                "descupdate": "The description for `{{tag}}` has been updated.",
                "descreset": "The description for `{{tag}}` has been reset.",
                "subcommandconflict": "You can't use the name `{{name}}` because there is a subcommand with that name!",
                "toptagformat": "{{index}}. **{{name}}** ({{author}})\n    - Favourites: {{favourites}} Uses: {{uses}}",
                "toptags": "Here are the top 10 tags!\n\n{{tags}}",
                "tagauthor": "The tag `{{tag}}` was created by **{{author}}**",
                "favouriteadd": "The tag `{{tag}}` has been added to your favourites list.",
                "favouriteremove": "The tag `{{tag}}` has been removed from your favourites list.",
                "favourites": "You have {{count}} tags on your favourites list.\n```fix\n{{tags}}\n```"
            },
            "ccommand": {
                "info": "CCommands are a system of custom commands that moderators can create for their users, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit <https://blargbot.xyz/tags>.",
                "usage": "cc <subcommand> [args]",
                "subcommand": {
                    "set": {
                        "usage": "cc set <name> <content>",
                        "info": "Creates or edits a custom command with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "cc delete <name>",
                        "info": "Deletes a custom command."
                    },
                    "rename": {
                        "usage": "cc rename <name> <newName>",
                        "info": "Renames a custom command."
                    },
                    "author": {
                        "usage": "cc author <name>",
                        "info": "Returns the author of the custom command."
                    },
                    "transfer": {
                        "usage": "cc transfer <name> <user>",
                        "info": "Transfers ownership of a custom command to somebody else. Must be consensual."
                    },
                    "list": {
                        "usage": "cc list",
                        "info": "Lists the custom commands on the guild."
                    },
                    "test": {
                        "usage": "cc test",
                        "info": "Executes code in the context of your account."
                    },
                    "help": {
                        "usage": "cc help [subcommand]",
                        "info": "Displays this!"
                    }
                },
                "dontown": "[[emote.x]] You don't own that custom command!",
                "notag": "[[emote.x]] There is no custom command with that name.",
                "tagset": "[[emote.check]] Custom command `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The custom command `{{old}}` has been renamed to `{{new}}`",
                "raw": "The code for {{name}} is:\\n```{{code}}```",
                "alreadyexists": "A custom command with that name already exists.",
                "testoutput": "Test Output:\\n\\n{{output}}"
            },
            "locale": {
                "info": "Sets what locale messages will be sent in.",
                "usage": "locale",
                "set": "Your locale has been set to {{locale}}!",
                "list": "Your current locale is: {{current}}\n\nPlease select which locale you want to use."
            },
            "tokenify": {
                "info": "",
                "usage": ""
            },
            "nato": {
                "info": ""
            },
            "invite": {
                "info": "",
                "message": ""
            },
            "donate": {
                "info": "",
                "willdm": "Ok, I'll send you my donation information in a DM.",
                "message": "placeholder"
            },
            "mods": {
                "info": "",
                "mods": "Mods on **{{guild}}**",
                "nomods": "There are no mods on this guild.",
                "nomodsonline": "There are no online mods."
            },
            "help": {
                "info": "",
                "allcommands": "Here are all the commands you can execute on **{{guild}}**.\n```markdown\n{{commands}}\n```\nFor more information about commands, do `help <commandname>` or visit <https://blargbot.xyz/commands>.",
                "nocommand": "Sorry, there's no command with the name '{{name}}'!",
                "commandinfo": "**{{type}}: {{name}}**\n\n**Aliases**: {{aliases}}\n**Usage**: {{usage}}\n\n{{description}}",
                "aliases": "No aliases",
                "subcommand": "Subcommand",
                "command": "Command",
                "nosubcommand": "Sorry, there's no subcommand for '{{command}}' with the name '{{name}}'!",
                "subcommands": "**Subcommands**: {{subcommands}}\n\nDo `help <command> <subcommand>` to get more information about a subcommand!"
            },
            "gamatoto": {
                "info": "Go on a magical expedition with Gamatoto! Use this command to check on your stats, or use a subcommand to go on an adventure!",
                "subcommand": {
                    "start": {
                        "usage": "<location>",
                        "info": "Starts an expedition!"
                    },
                    "end": {
                        "info": "Ends an expedition!"
                    },
                    "locations": {
                        "info": "Lists all the expedition locations."
                    }
                },
                "stats": "<:bc_cat:345081695990710272> Here are your items!\n\n{{stats}}",
                "alreadystarted": "An expedition is already in progress!",
                "notstarted": "You haven't started an expedition!",
                "nolocation": "Sorry, that wasn't a valid location. The locations you can currently visit are:\n\n{{locations}}",
                "invalidlocation": "Something weird happened. The place you were exploring no longer exists! Please start another expedition.",
                "expeditionbeings": "<:bc_cat:345081695990710272> THE SEARCH BEGINS! <:bc_cat:345081695990710272>\n\nLocation: {{location}}\n\nPlease check back later by doing `gamatoto end`!",
                "expeditionends": "<:bc_cat:345081695990710272> EXPEDITION RESULTS! <:bc_cat:345081695990710272>\n\nLocation: {{location}}\nDuration: {{minutes}} minutes\n\n{{results}}",
                "notimeelapsed": "No time has elapsed since the expedition started. Gamatoto didn't find anything!",
                "itemfound": "Gamatoto found {{amount}} {{item}} at the {{location}}.",
                "levelup": ":fireworks: Gamatoto is now level {{level}}!",
                "gamatotoxp": "Gamatoto gained **{{amount}}**XP ({{old}} → **{{new}}**)",
                "itemincrease": "{{item}} You found **{{amount}}** ({{old}} → **{{new}}**)",
                "locations": "Here are all the expedition locations!\n\n{{locations}}",
                "wronglevel": "Sorry, you need to be level {{level}} in order to explore that place!",
                "gamatotoitems": "Here are your items:\n{{items}}",
                "gamatotostats": "Gamatoto is currently level {{level}}! [{{currentxp}}XP/{{neededxp}}XP]",
                "gamatotocurrent": "Gamatoto has been exploring the **{{location}}** for **{{minutes}}** minutes.\n\nUse `gamatoto end` to end the expedition.",
                "gamatotoidle": "Gamatoto isn't on an expedition right now. Send him on an adventure by doing `gamatoto start [location]`!"
            },
            "prefix": {
                "info": "Gets or sets your command prefixes. This command configures user prefixes. For guild prefixes, use the `setup` command.",
                "subcommand": {
                    "add": {
                        "usage": "<prefix>",
                        "info": "Adds a prefix to your list."
                    },
                    "remove": {
                        "usage": "<prefix>",
                        "info": "Removes a prefix from your list."
                    }
                },
                "prefixlist": "{{content}}\nTo configure your prefixes, use the `add` and `remove` subcommands. To configure the guild prefixes, use the `setup` command.",
                "userprefixes": "Here are your prefixes:\n```md\n{{userprefixes}}\n```",
                "guildprefixes": "Here are the prefixes on this guild:\n```md\n{{guildprefixes}}\n```",
                "noprefixes": "You have no custom prefixes.",
                "defaultprefixes": "You can always use these prefixes:\n{{prefixes}}",
                "prefixadded": "That prefix has been added!",
                "prefixremoved": "That prefix has been removed!",
                "nothingchanged": "Nothing was changed."
            }
        },
        "image": {
            "cat": {
                "info": "Gives you a lovely dear sweet precious kitty.\nD'awww!",
                "usage": "cat"
            },
            "delete": {
                "info": ""
            },
            "thesearch": {
                "info": "",
                "defaulttext": ""
            },
            "shit": {
                "info": ""
            }
        },
        "admin": {
            "setup": {
                "staff": {
                    "setrole": "The staff roles have been updated.",
                    "rolequery": "Select the roles that will be considered moderator roles. Users with these roles will be able to use admin commands."
                },
                "info": "Configures various settings.",
                "usage": "setup <subcommand>",
                "subcommand": {
                    "staffuser": {
                        "usage": "staffuser <add | remove> <user>...",
                        "info": "Adds or removes users to the staff list."
                    },
                    "staffrole": {
                        "usage": "mod user role",
                        "info": "Brings up a dialog to select or deselect staff roles."
                    },
                    "mute": {
                        "usage": "setup mute",
                        "info": "Sets up the mute role."
                    },
                    "announcement": {
                        "usage": "setup announcement",
                        "info": "Sets up announcements."
                    },
                    "modlog": {
                        "usage": "modlog [event]... [flags]",
                        "info": "Sets up the modlog for the specified events. If no channel is specified, defaults to the current channel. If no events are specified, defaults to all events."
                    }
                },
                "mute": {
                    "setrole": "The muted role has been updated.",
                    "rolequery": "Select the muted role."
                },
                "announce": {
                    "set": "Announcements have been set up.",
                    "rolequery": "Select the role that should be pinged for announcements.",
                    "channelquery": "Select the channel that announcements should go into."
                },
                "modlog": {
                    "set": "The modlog has been set to the channel {{channel}} with the following events:\n```\n{{events}}\n```\n{{hadInvalid}}",
                    "remove": "The modlog for the following events has been removed:\n```\n{{events}}\n```\n{{hadInvalid}}",
                    "invalid": "No valid events were provided. The list of valid events is:\n```\n{{eventList}}\n```",
                    "hadinvalid": "You had some invalid events in your command. The list of valid events is:\n```\n{{eventList}}\n```",
                    "list": "Here are the modlogs that are active on your guild:\n\n{{events}}"
                }
            },
            "reason": {
                "info": "",
                "nocase": "",
                "reasonset": ""
            },
            "help": {
                "info": "",
                "allcommands": "Here are all the commands you can execute on **{{guild}}**.\n```markdown\n{{commands}}\n```\nFor more information about commands, do `help <commandname>` or visit <https://blargbot.xyz/commands>.",
                "nocommand": "Sorry, there's no command with the name '{{name}}'!",
                "commandinfo": "**Command: {{name}}**\n\n**Aliases**: {{aliases}}\n**Usage**: {{usage}}\n\n{{description}}"
            },
            "ccommand": {
                "info": "",
                "subcommand": {
                    "set": {
                        "info": ""
                    },
                    "delete": {
                        "info": ""
                    },
                    "rename": {
                        "info": ""
                    },
                    "author": {
                        "info": ""
                    },
                    "transfer": {
                        "info": ""
                    },
                    "list": {
                        "info": ""
                    },
                    "test": {
                        "info": ""
                    },
                    "help": {
                        "info": ""
                    }
                },
                "dontown": "",
                "notag": "",
                "tagset": "",
                "tagrename": "",
                "raw": "",
                "alreadyexists": "",
                "testoutput": ""
            }
        }
    },
    "tag": {
        "comment": {
            "desc": "Specifies an area that will be ignored from parsing.",
            "example": {
                "in": "This will be shown {//;This won't be}",
                "out": "This will be shown"
            }
        },
        "void": {
            "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
            "example": {
                "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                "out": "This will be shown  but this will be set"
            }
        },
        "randint": {
            "desc": "Returns a random integer between the provided range. `min` defaults to `0`.",
            "example": {
                "in": "One: {randint;5}, two: {randint;10;20}",
                "out": "One: 2, two: 17"
            }
        },
        "array": {
            "filter": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array only containing the elements where the result of the iteration was `true` or `1`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{filter;array;{logic;{get;i};<;3}}",
                    "out": "[1;2]"
                }
            },
            "foreach": {
                "desc": "Iterates through an array, setting the local variable `i` to the current element. If `varName` is provided, sets that variable instead.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.foreach;array;Element:{get;i}{newline}}",
                    "out": "Element:1\nElement:2\nElement:3\nElement:4\nElement:5"
                }
            },
            "get": {
                "desc": "Gets an element from an array at the position `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\nElement at index 3: {array.get;array;3}",
                    "out": "Element at index 3: 4"
                }
            },
            "isarray": {
                "desc": "Returns true if the provided element is an array, and false otherwise. You cannot use variable names.",
                "example": {
                    "in": "{set;arr1;[this;is;an;array]}\n{set;arr2;this is not an array}\narr1: {array.isarray;{get;arr1}}\narr2: {array.isarray;{get;arr2}}",
                    "out": "arr1: true\narr2: false"
                }
            },
            "join": {
                "desc": "Joins an array with the provided `delimiter`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.join;array;,{space}}",
                    "out": "1, 2, 3, 4, 5"
                }
            },
            "length": {
                "desc": "Returns the length of the given array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.length;array}",
                    "out": "5"
                }
            },
            "map": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array where each element is the result of each iteration.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.map;array;{math;i;*;2}}",
                    "out": "[2;4;6;8;10]"
                }
            },
            "pop": {
                "desc": "Removes and returns the last element of the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.pop;array}\n{get;array}",
                    "out": "5\n[1;2;3;4]"
                }
            },
            "push": {
                "desc": "Pushes an element to the end of an array. Returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.push;array;6}",
                    "out": "[1;2;3;4;5;6]"
                }
            },
            "set": {
                "desc": "Sets an element on the array at the specified `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;8;5]}\n{get;array}\n{array.set;array;3;4}\n{get;array}",
                    "out": "[1;2;3;8;5]\n\n[1;2;3;4;5]"
                }
            },
            "shift": {
                "desc": "Removes and returns the first element in the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.shift;array}\n{get;array}",
                    "out": "1\n[2;3;4;5]"
                }
            },
            "slice": {
                "desc": "Returns a section of the array, including the `start` index and excluding the `end` index. If `end` is unspecified, defaults to all remaining elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{slice;array;3}\n{slice;array;2;4}",
                    "out": "[4;5]\n[3;4]"
                }
            },
            "sort": {
                "desc": "Sorts and returns an array, by default in ascending order.\n\nIf `function` is provided, sorting will occur based on the result of executing said function. This will set two local variables: `a` (or `varNameOne`) and `b` (or `varNameTwo`). \n\nThe function must return a number. If the number is greater than 0, `a` will be considered greater than `b`. If the number is lower than 0, `b` will be considered greater than `a`. Any non-number result will be converted to 0, where both elements are equal.",
                "example": {
                    "in": "{set;array;[2;5;1;6;3;7]}\n{sort;array}\n{sort;array;{math;b;-;a}}",
                    "out": "[1;2;3;5;6;7]\n[7;6;5;3;2;1]"
                }
            },
            "splice": {
                "desc": "Starting at the position `start`, removes `deleteCount` elements from the array and adds the remaining `items` at that position. Returns the removed elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.splice;array;2;2;inserted;items}\n{get;array}",
                    "out": "[3;4]\n[1;2;inserted;items;5]"
                }
            },
            "split": {
                "desc": "Splits the `text` by the `delimiter`, returning the new array.",
                "example": {
                    "in": "{array.split;This will be split by spaces;{space}}",
                    "out": "[This;will;be;split;by;spaces]"
                }
            },
            "unshift": {
                "desc": "Inserts `value` at the beginning of the array, and returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.unshift;array;0}",
                    "out": "[0;1;2;3;4;5]"
                }
            }
        },
        "channel": {
            "id": {
                "desc": "Returns the ID of the current or specified channel.",
                "example": {
                    "in": "{channel.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "nsfw": {
                "desc": "Returns whether the current or specified channel is NSFW.",
                "example": {
                    "in": "{channel.nsfw}",
                    "out": "false"
                }
            },
            "name": {
                "desc": "Returns the name of the current or specified channel.",
                "example": {
                    "in": "{channel.name;#general}",
                    "out": "general"
                }
            },
            "position": {
                "desc": "Returns the position of the current or specified channel.",
                "example": {
                    "in": "{channel.position}",
                    "out": "1"
                }
            },
            "topic": {
                "desc": "Returns the topic of the current or specified channel (text only).",
                "example": {
                    "in": "{channel.topic}",
                    "out": "This is an example channel topic."
                }
            },
            "type": {
                "desc": "Returns the type of the current or specified channel (returns \"text\" or \"voice\").",
                "example": {
                    "in": "{channel.type}",
                    "out": "text"
                }
            }
        },
        "general": {
            "clean": {
                "desc": "Cleans the provided text by shrinking all whitespace.",
                "example": {
                    "in": "{clean;  one\n\n                two\n  \n\n    three}",
                    "out": "one\ntwo\nthree"
                }
            },
            "//": {
                "desc": "Specifies an area that will be ignored from parsing",
                "example": {
                    "in": "This will be shown {//;This won't be}",
                    "out": "This will be shown"
                }
            },
            "get": {
                "desc": "Returns the stored variable with the supplied name. Variable prefixes can modify the pool in which to search.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "set": {
                "desc": "Sets the stored variable with the supplied name to the supplied value. Variable prefixes can modify the pool in which to set.",
                "example": {
                    "in": "{set;var;This is a variable.}\n{get;var}",
                    "out": "This is a variable."
                }
            },
            "trim": {
                "desc": "Removes whitespace before and after the provided text. Consider using the {clean} tag to remove whitespace within the text.",
                "example": {
                    "in": "{trim;{space;5}Hello{space;5}}",
                    "out": "Hello"
                }
            },
            "void": {
                "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
                "example": {
                    "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                    "out": "This will be shown  but this will be set"
                }
            },
            "newline": {
                "desc": "Returns the specified number of newlines, defaulting to 1.",
                "example": {
                    "in": "One{newline;5}Two",
                    "out": "One\n\n\n\n\nTwo"
                }
            },
            "space": {
                "desc": "Returns the specified number of spaces, defaulting to 1.",
                "example": {
                    "in": "One{space;5}Two",
                    "out": "One     Two"
                }
            }
        },
        "guild": {
            "createdat": {
                "desc": "Returns when the current guild was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{guild.createdat}",
                    "out": "1466379030450"
                }
            },
            "channels": {
                "desc": "Returns the channels in the current guild as an array.",
                "example": {
                    "in": "{guild.channels}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "icon": {
                "desc": "Returns the URL of the current guild's icon.",
                "example": {
                    "in": "{guild.icon}",
                    "out": "https://cdn.discordapp.com/icons/194232473931087872/2e9d173fc1461ff9e4672cb8782978e7.png?size=512"
                }
            },
            "id": {
                "desc": "Returns the ID of the current guild.",
                "example": {
                    "in": "{guild.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "name": {
                "desc": "Returns the name of the current guild.",
                "example": {
                    "in": "{guild.name}",
                    "out": "Cat Town"
                }
            },
            "owner": {
                "desc": "Returns the ID of the guild's owner.",
                "example": {
                    "in": "{guild.owner}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "region": {
                "desc": "Returns the region the current guild is in.",
                "example": {
                    "in": "{guild.region}",
                    "out": "us-west"
                }
            },
            "roles": {
                "desc": "Returns an array of roles in the current guild.",
                "example": {
                    "in": "{guild.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            }
        },
        "logic": {
            "if": {
                "desc": "If the `value` is equal to `true` or `1`, executes `then`.\nIf the `value` is equal to `false` or `0`, executes `else`.\nOtherwise, throws an error.\n\nUse this with the {logic} tag.",
                "example": {
                    "in": "{if;true;This will be shown.;This won't be shown.}",
                    "out": "This will be shown."
                }
            },
            "logic": {
                "desc": "Does logical operators on the `augend` and `operands`, returning `true` or `false`.\n\nEquivalence Operators:\n - `==` - equal\n - `!=` - not equal\n - `<` - less than\n - `<=` - less than or equal\n - `>` - greater than\n - `>=` - greater than or equal\n - `startswith` - the augend starts with the operand\n - `endswith` - the augend ends with the operand\n - `includes` - the augend includes the operand\n\nLogical Operators:\n - `&&` - returns true if the augend and operand are both true\n - `||` - returns true if either the augend or operand are true\n - `XOR` - returns true if only one of the augend and operand are true (not both)\n\nOther Operators:\n - `!` - inverts the next operand (true becomes false, etc.)",
                "example": {
                    "in": "{logic;5;==;6}\n{logic;5;!=;6;&&;5;>;6}\n{logic;5;>=;6;||;5;<;6}\n{logic;5;<=;6;xor;true}\n{logic;1234;startswith;12}\n{logic;1234;endswith;34}\n{logic;1234;includes;23}\n{logic;!;true}\n{logic;!;5;!=;5}",
                    "out": "false\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue"
                }
            }
        },
        "math": {
            "abs": {
                "desc": "Returns the absolute value of the provided number (no negatives).",
                "example": {
                    "in": "{math.abs;-3523}",
                    "out": "3523"
                }
            },
            "base": {
                "desc": "Parses the `number` using the provided base `origin` (defaulting to 10), and converts it to base `radix`.",
                "example": {
                    "in": "{math.base;FA;16;10}",
                    "out": "250"
                }
            },
            "ceil": {
                "desc": "Rounds the provided decimal up.",
                "example": {
                    "in": "{math.ceil;1.25}",
                    "out": "2"
                }
            },
            "floor": {
                "desc": "Rounds the provided decimal down.",
                "example": {
                    "in": "{math.floor;1.75}",
                    "out": "1"
                }
            },
            "math": {
                "desc": "Calculates the value of the provided expression using the following operators:\n\n - `^` - exponents\n - `/` - division\n - `*` - multiplication\n - `+` - addition\n - `-` - subtraction\n - `&` - bitwise AND\n - `|` - bitwise OR\n - `XOR` - bitwise XOR\n\nOperators are executed using the Order of Operations (Brackets, Exponents, Division, Multiplication, Addition, Subtraction, Bitwise).\n\nIf an operator isn't specified, it uses the last-used operator (defaulting to addition).\n\nBrackets would be achieved by using another nested {math} tag.\n\nIf an `operand` or `augend` cannot be parsed as a number, a variable with the same name will be retrieved. If the retrieved variable is also not a number, throws an error.",
                "example": {
                    "in": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: {math;1;+;2;^;2;*;3;-;4;/;5}\n\nEquation: 4 + 6 + 8\nAnswer: {math;4;6;8}\n\nEquation: 01001010 | 11000100 & 11111011\n{trim;{set;bin1;{math.base;01001010;2;10}}\n{set;bin2;{math.base;11000100;2;10}}\n{set;bin3;{math.base;11111011;2;10}}\nAnswer: {base;{math;bin1;|;bin2;|;bin3};10;2}}",
                    "out": "Equation: 1 + (2^2 * 3) - (4 / 5)\nAnswer: 12.2\n\nEquation: 4 + 6 + 8\nAnswer: 18\n\nEquation: 01001010 | 11000100 & 11111011\nAnswer: 11111111"
                }
            },
            "parsefloat": {
                "desc": "Attempts to parse the given text as a decimal.",
                "example": {
                    "in": "{math.parsefloat;2.5}\n{math.parsefloat;not a number}",
                    "out": "2.5\nNaN"
                }
            },
            "parseint": {
                "desc": "Attempts to parse the given text as an integer.",
                "example": {
                    "in": "{math.parseint;2.5}\n{math.parseint;not a number}",
                    "out": "2\nNaN"
                }
            },
            "randint": {
                "desc": "Returns a random integer between the provided range. `min` defaults to `0`",
                "example": {
                    "in": "One: {randint;5}, two: {randint;10;20}",
                    "out": "One: 2, two: 17"
                }
            },
            "round": {
                "desc": "Rounds the given `number` to the specified decimal `places`, defaulting to 0.",
                "example": {
                    "in": "{math.round;5.125}\n{math.round;5.125;1}\n{math.round;5.125;2}",
                    "out": "5\n5.1\n5.13"
                }
            }
        },
        "message": {
            "id": {
                "desc": "Returns the ID of the executing command message.",
                "example": {
                    "in": "{message.id}",
                    "out": "[[generic.example.id1]]"
                }
            }
        },
        "role": {
            "color": {
                "desc": "Returns the color of the specified role in hexadecimal.",
                "example": {
                    "in": "#{role.color;coolrole}",
                    "out": "#2ECC71"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified role.",
                "example": {
                    "in": "{role.id;coolrole}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "mention": {
                "desc": "Returns a mention of the specified role.",
                "example": {
                    "in": "{role.mention;coolrole}",
                    "out": "@coolrole"
                }
            },
            "name": {
                "desc": "Returns the name of the specified role.",
                "example": {
                    "in": "{role.name;coolrole}",
                    "out": "coolrole"
                }
            },
            "position": {
                "desc": "Returns the position of the specified role.",
                "example": {
                    "in": "{role.position;coolrole}",
                    "out": "5"
                }
            }
        },
        "user": {
            "avatar": {
                "desc": "Returns the avatar URL of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.avatar}",
                    "out": "https://cdn.discordapp.com/avatars/[[generic.example.id1]]/avatarhash.png"
                }
            },
            "createdat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, was created as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.createdat}",
                    "out": "1444710446104"
                }
            },
            "discrim": {
                "desc": "Returns the discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.discrim}",
                    "out": "1111"
                }
            },
            "fullname": {
                "desc": "Returns the name + discriminator of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.fullname}",
                    "out": "person#1111"
                }
            },
            "game": {
                "desc": "Returns the game the specified user is playing, defaulting to the executing user. If the user isn't playing a game, returns nothing.",
                "example": {
                    "in": "{user.game}",
                    "out": "with BBTag!"
                }
            },
            "id": {
                "desc": "Returns the ID of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.id}",
                    "out": "[[generic.example.id1]]"
                }
            },
            "joinedat": {
                "desc": "Returns the date that the specified user, defaulting to the executing user, joined the current guild as a Unix timestamp (milliseconds).",
                "example": {
                    "in": "{user.joinedat}",
                    "out": "1466379030499"
                }
            },
            "mention": {
                "desc": "Mentions the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.mention}",
                    "out": "@person"
                }
            },
            "name": {
                "desc": "Returns the name of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.name}",
                    "out": "person"
                }
            },
            "nick": {
                "desc": "Returns the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.nick}",
                    "out": "CoolNickname"
                }
            },
            "roles": {
                "desc": "Returns an array of the roles the specified user has, defaulting to the executing user.",
                "example": {
                    "in": "{user.roles}",
                    "out": "[[[generic.example.id1]];[[generic.example.id2]];[[generic.example.id3]]]"
                }
            },
            "setnick": {
                "desc": "Sets the nickname of the specified user, defaulting to the executing user.",
                "example": {
                    "in": "{user.setnick;EvenCoolerNickname}",
                    "out": "(the nickname was set)"
                }
            },
            "status": {
                "desc": "Returns the status of the specified user, defaulting to the executing user. Can return \"online\", \"away\", \"dnd\", or \"offline\".",
                "example": {
                    "in": "{user.status}",
                    "out": "online"
                }
            }
        }
    },
    "announce": {
        "rolequery": "",
        "channelquery": ""
    },
    "website": {
        "header": {
            "login": "Login",
            "logout": "Logout",
            "commands": "Commands",
            "bbtag": "BBTag",
            "subtags": "SubTags"
        },
        "index": {
            "desc": "blargbot is a multipurpose Discord bot dedicated to providing quality commands and services, including chatlogs and an in-depth custom command system.",
            "commands": {
                "title": "Commands",
                "desc": "blargbot is equipped with numerous commands, all of which are documented and categorized for your convenience."
            },
            "bbtag": {
                "title": "BBTag",
                "desc": "blargbot uses a sophisticated tag system called BBTag, which you can use to create advanced custom commands."
            },
            "customization": {
                "title": "Customization",
                "desc": "We understand that not every guild is the same, so blargbot has extensive customization. You can control exactly which roles can use which commands, specify custom prefixes, and even change the display language!"
            },
            "moderation": {
                "title": "Moderation",
                "desc": "Need something to moderate your chat? blargbot is equiped with many moderation utilities, from basic operations like banning and muting, to more advanced stuff like chatlogging or automatic censoring."
            },
            "opensource": {
                "title": "Open-Source",
                "desc": "Sharing is caring! blargbot is completely open-source under the GNU AGPLv3 License. Feel free to take a look and learn how everything works. If you use any of my code in your own project, you are required to credit me. See the license for more details."
            },
            "suggestions": {
                "title": "Open To Suggestions",
                "desc": "Have a suggestion for the bot? I would be glad to hear it! Found a bug? I'd like to hear that too! You can suggest anything to me using the `suggest` command, by joining my guild, or by submitting a ticket."
            }
        },
        "bbtag": "# BBTag\n> Not to be confused with BBCode!\n\nBBTag is a template-based programming language, designed to provide a powerful framework to create advanced custom commands.\n\n## Terminology\n\n- A `tag` refers to a block of BBTag code, whether it be a public tag or a custom command.\n- A `subtag` refers to a BBTag component. Advanced `tags` are made of many `subtags`.\n- A `class` refers to a group of `subtags`.\n\n## SubTags\n\nSubtags are the basic building block of BBTag. They perform dynamic functions, whether it be getting the name of a user or doing math. Let's take a look at a subtag now:\n```\n{math.randint;1;10}\n```\nWhen run, this may return something like this:\n```\n6\n```\nAs you can see, the `math.randint` subtag returns a random integer between the provided range.\n\n### Anatomy of a SubTag\n\nA subtag is made of various components. A syntax diagram may look something like this:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nOh wow, ok. That's kinda confusing, but bear with me!\n\n#### Classes\n\n> `[class.]name`\n\nSubtags are split into groups, called **classes**. Each class is designated a specific type of purpose. For example, the `math` class would contain subtags that deal with numbers. Likewise, the `user` class would contain subtags that give information about users. Classes provide a system of organization.\n\nWhen using a subtag, the preferred usage would be `{class.name}`. This improves readability. However, explicitly stating the class is usually optional. BBTag knows that `{math.randint}` and `{randint}` are the same subtag. This is called **implicit classing**. The exception to this are subtags in the `general` class, which should be used *without* an explicit class.\n\nHowever, you should be careful with implicit classing! Sometimes, classes may have subtags with the same name. For example, `{user.id}` and `{channel.id}` both have subtags with the name `id`. If you attempt to use implicit classing with a subtag that exists in multiple classes, it will return an error!\n\n#### Piping\n\n> `[![var]]`\n\nPiping is a feature that allows you to redirect the output of a subtag, either to a variable or into a void. This can help to clean up your code.\n\nFor example, if for whatever reason you don't want a subtag to output anything, you can add a `!` after the subtag name to silence it. The following lines are equivalent:\n```\n{void;{math.randint;1;10}}\n{math.randint!;1;10}\n```\nIf you want to store the subtag's output to a variable, you can add `!variableName` after the subtag name. The following lines are equivalent:\n```\n{set;randomInteger;{math.randint;1;10}}\n{math.randint!randomInteger;1;10}\n```\nPiping output is slightly faster to execute than using the full syntax.\n\n#### Arguments\n\n> `[;args]...`\n\nYou can pass parameters into subtags. These are separated by semicolons `;`. Arguments are different per-subtag, and documentation on these can be found on the subtag page.\n\n##### Named Arguments\n\n> `=<namedArgs>...`\n\nNormally, the order of provided arguments is very important. However, you can use the named counterparts instead. This is done by using the `=` token instead of a semicolon, and then specifying key-value tags, in the format of `{*key;value}`.\n\nFor example, the usage of `{math.randint}` is `{math.randint;min;max}`. The names of the arguments are `min` and `max` respectively. The following usages are equivalent:\n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nYou cannot use both named arguments and ordered arguments in the same subtag."
    },
    "modlog": {
        "events": {
            "kick": "Kick",
            "ban": "Ban",
            "unban": "Unban",
            "mute": "Mute",
            "unmute": "Unmute",
            "warn": "Warning",
            "pardon": "Pardon",
            "rename": "Rename",
            "specialroleadd": "Special Role Added",
            "specialroleremove": "Special Role Removed"
        },
        "case": "{{icon}} Case {{number}}: {{event}}",
        "setreason": "Responsible moderator, please do `reason {{number}}` to set the reason.",
        "warnings": {
            "given": "Warnings Given",
            "removed": "Warnings Pardoned",
            "total": "New Total"
        },
        "rename": {
            "old": "Old Name",
            "new": "New Name"
        },
        "duration": "Duration"
    }
}
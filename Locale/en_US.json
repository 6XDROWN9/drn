{
    "specs": {
        "lang": "en_US",
        "contributors": [
            "stupid cat"
        ]
    },
    "comments": [
        "This is a locale file for blargbot.",
        "For contribution, please use the following guidelines:",
        "1. Arguments are passed into templates using {{name}}. Do not modify these.",
        "2. Templates are used in templates by using [[path.to.key]]. Do not modify these.",
        "3. All commands must contain an 'info' and 'usage' property.",
        "4. For random outputs, terms are placed in a '.list' context. Each random output is specified on a new line. You may contribute random outputs as needed.",
        "5. Terms should not end with periods. Other punctuation is fine.",
        "6. Keep translations civil.",
        "Thank you!"
    ],
    "generic": {
        "output": "Output:\n{{output}}",
        "nooutput": "No output...",
        "queryexpire": "This query will expire in {{length}} minutes",
        "resolveuser": {
            "nousers": "No users found",
            "pickuser": "{{length}} users were found! Please select one from the list"
        },
        "resolverole": {
            "noroles": "No roles found",
            "pickrole": "{{length}} roles were found! Please select one from the list"
        },
        "resolvechannel": {
            "nochannels": "No channels found",
            "pickchannel": "{{length}} channels were found! Please select one from the list"
        },
        "edited": "edited",
        "created": "created",
        "deleted": "deleted",
        "menu": {
            "choices": "Page {{page}}/{{max}}"
        },
        "nochange": "Nothing was changed."
    },
    "menu": {
        "cancel": {
            "name": "Cancel",
            "description": "Close this menu"
        },
        "confirm": {
            "name": "Confirm",
            "description": "Confirms this menu"
        }
    },
    "emote": {
        "check": ":white_check_mark:",
        "x": ":x:",
        "okhand": ":ok_hand:"
    },
    "error": {
        "keyundef": "No such locale entry was found: '{{key}}'",
        "memberundef": "No such member was found: '{{member}}'",
        "userundef": "No such user was found: '{{user}}'",
        "channelundef": "No such channel was found: '{{channel}}'",
        "roleundef": "No such role was found: '{{role}}'",
        "pleasereport": "If you think this is an error, please report it!",
        "generic": "Something went wrong!\n```\n{{message}}\n```\n[[error.pleasereport]]",
        "messagetoolong": "Whoops! I tried to send a message that was too long. [[error.pleasereport]]",
        "notenoughparams": "Not enough parameters! Do `{{prefix}}help {{name}}` for more details\n\nExpected `{{expected}}` parameters, but got `{{received}}` instead.",
        "tag": {
            "notfound": "Tag '{{tag}}' doesn't exist",
            "toomanyargs": "Too many args (r:{{received}} e:{{expected}})",
            "toofewargs": "Too little args (r:{{received}} e:{{expected}})",
            "isnan": "Expected '{{arg}}' to be a number, but received '{{value}}'",
            "maxlessthanmin": "Max must be greater than Min",
            "ccommandonly": "'{{tag}}' may only be used in ccommands",
            "authorstaff": "Author {{author}} must be staff to use '{{tag}}'",
            "noperms": "Bot is lacking permission '{{perm}}' required by tag '{{tag}}'",
            "toolow": "Bot cannot '{{tag}}' because its lower-ranked than '{{target}}'",
            "unclosed": "Unmatched opening bracket [{{column}}:{{row}}]",
            "unopened": "Unmatched closing bracket [{{column}}:{{row}}]",
            "invalidradix": "Radix must be between 2 and 36, but received '{{radix}}'",
            "notanarray": "Variable '{{name}}' is not an array (Received: '{{value}}')",
            "notbool": "Variable '{{name}}' is not a boolean (Received: '{{value}}')"
        }
    },
    "command": {
        "general": {
            "ping": {
                "info": "Pong!\nFinds the command latency",
                "usage": "ping",
                "randmsg": [
                    "Existence is a lie.",
                    "You're going to die some day, perhaps soon.",
                    "Nothing matters.",
                    "Where do you get off?",
                    "There is nothing out there.",
                    "You are alone in an infinite void.",
                    "Truth is false.",
                    "Forsake everything.",
                    "Your existence is pitiful.",
                    "We are all already dead.",
                    "Meow.",
                    "Fear is freedom.",
                    "Subjugation is liberation.",
                    "Contradiction is truth.",
                    "Would you like to make a contract?",
                    "Let it go, and move on."
                ],
                "final": "Pong! ({{time}}ms)"
            },
            "brainfuck": {
                "info": "Executes brainfuck code",
                "usage": "brainfuck <code>",
                "flags": {
                    "p": "Shows a list of pointers after the execution",
                    "i": "Specifies the input for the , operator"
                }
            },
            "cat": {
                "info": "Gets a picture of a cat",
                "usage": "cat"
            },
            "ship": {
                "info": "Gives you the ship name for two users.",
                "usage": "ship <user1> <user2>",
                "final": "Your shipname is **{{name}}**!",
                "notenough": "You have to tell me who to ship!"
            },
            "tag": {
                "info": "Tags are a system of public commands that anyone can create or execute, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit https://blargbot.xyz/tags\nBy creating a tag, you acknowledge that you agree to the Terms of Service (https://blargbot.xyz/tags/tos)",
                "usage": "tag <name | subcommand> [args]",
                "dontown": "[[emote.x]] You don't own that tag!",
                "alreadyexists": "[[emote.x]] A tag with that name already exists!",
                "notag": "[[emote.x]] There is no tag with that name",
                "tagset": "[[emote.check]] Tag `{{name}}` {{process}}!",
                "tagrename": "[[emote.check]] The tag `{{old}}` has been renamed to `{{new}}`",
                "raw": "The code for {{name}} is:\n```{{code}}```",
                "testoutput": "Test Output:\n\n{{output}}",
                "help": "Tags are a system of public commands that anyone can create or execute, using the BBTag language.\n\n**Subcommands**:\n{{subcommands}}\n\nFor more information about a subcommand, do `b!t help <subcommand>`\nFor more information about BBTag, visit https://blargbot.xyz/tags\nBy creating a tag, you acknowledge that you agree to the Terms of Service (https://blargbot.xyz/tags/tos)",
                "subcommand": {
                    "set": {
                        "usage": "tag set <name> <content>",
                        "info": "Creates or edits a tag with the provided name and content. Will not replace any tags made by anyone else."
                    },
                    "delete": {
                        "usage": "tag delete <name>",
                        "info": "Deletes a tag that you own."
                    },
                    "rename": {
                        "usage": "tag rename <name> <new name>",
                        "info": "Renames a tag that you own."
                    },
                    "raw": {
                        "usage": "tag raw <name>",
                        "info": "Gets the raw code of a tag."
                    },
                    "info": {
                        "usage": "tag info <name>",
                        "info": "Displays information about a tag."
                    },
                    "transfer": {
                        "usage": "tag transfer <name> <user>",
                        "info": "Transfers a tag to the specified user. Variables will not be transferred."
                    },
                    "top": {
                        "usage": "tag top",
                        "info": "Displays the tags that have been the most favorited. "
                    },
                    "author": {
                        "usage": "tag author <name>",
                        "info": "Displays the author of a tag."
                    },
                    "search": {
                        "usage": "tag search <query>",
                        "info": "Searches for a tag with a name containing your query."
                    },
                    "list": {
                        "usage": "tag list [@user]",
                        "info": "Lists all the tags, or optionally all the tags created by a specific user."
                    },
                    "favorite": {
                        "usage": "tag favorite <name>",
                        "info": "Favorites the specified tag."
                    },
                    "report": {
                        "usage": "tag report <name>",
                        "info": "Reports a tag for violating the ToS. Please use responsibly."
                    },
                    "test": {
                        "usage": "tag test <code>",
                        "info": "Executes the given code in a test environment."
                    },
                    "help": {
                        "usage": "tag help [subcommand]",
                        "info": "Displays this!"
                    },
                    "docs": {
                        "usage": "tag docs [subtag]",
                        "info": "Gives a link to the BBTag documentation, or provides information about a specific subtag."
                    }
                }
            },
            "ccommand": {
                "info": "",
                "usage": "",
                "subcommand": {
                    "set": {
                        "usage": "",
                        "info": ""
                    },
                    "delete": {
                        "usage": "",
                        "info": ""
                    },
                    "rename": {
                        "usage": "",
                        "info": ""
                    },
                    "author": {
                        "usage": "",
                        "info": ""
                    },
                    "transfer": {
                        "usage": "",
                        "info": ""
                    },
                    "list": {
                        "usage": "",
                        "info": ""
                    },
                    "test": {
                        "usage": "",
                        "info": ""
                    },
                    "help": {
                        "usage": "",
                        "info": ""
                    }
                }
            }
        },
        "admin": {
            "mod": {
                "setrole": "The staff roles have been updated.",
                "rolequery": "Select the roles that will be considered moderator roles. Users with these roles will be able to use admin commands.",
                "info": "Sets what users/roles are considered to be staff.",
                "usage": "mod <subcommand>",
                "subcommand": {
                    "user": {
                        "usage": "mod user <add | remove> <user>...",
                        "info": "Adds or removes the specified user(s) to the staff list."
                    },
                    "role": {
                        "usage": "mod user role",
                        "info": "Brings up a dialog to select or deselect roles."
                    }
                }
            }
        },
        "image": {
            "cat": {
                "info": "Gives you a lovely dear sweet precious kitty.\nD'awww!",
                "usage": "cat"
            }
        }
    },
    "tag": {
        "comment": {
            "desc": "Specifies an area that will be ignored from parsing",
            "example": {
                "in": "This will be shown {//;This won't be}",
                "out": "This will be shown"
            }
        },
        "void": {
            "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
            "example": {
                "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                "out": "This will be shown  but this will be set"
            }
        },
        "randint": {
            "desc": "Returns a random integer between the provided range. `min` defaults to `0`",
            "example": {
                "in": "One: {randint;5}, two: {randint;10;20}",
                "out": "One: 2, two: 17"
            }
        },
        "array": {
            "filter": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "foreach": {
                "desc": "Iterates through an array, setting the local variable `i` to the current element. If `varName` is provided, sets that variable instead.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.foreach;array;Element:{get;i}{newline}}",
                    "out": "Element:1\nElement:2\nElement:3\nElement:4\nElement:5"
                }
            },
            "get": {
                "desc": "Gets an element from an array at the position `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\nElement at index 3: {array.get;array;3}",
                    "out": "Element at index 3: 4"
                }
            },
            "isarray": {
                "desc": "Returns true if the provided element is an array, and false otherwise. You cannot use variable names.",
                "example": {
                    "in": "{set;arr1;[this;is;an;array]}\n{set;arr2;this is not an array}\narr1: {array.isarray;{get;arr1}}\narr2: {array.isarray;{get;arr2}}",
                    "out": "arr1: true\narr2: false"
                }
            },
            "join": {
                "desc": "Joins an array with the provided `delimiter`.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.join;array;,{space}}",
                    "out": "1, 2, 3, 4, 5"
                }
            },
            "length": {
                "desc": "Returns the length of the given array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.length;array}",
                    "out": "5"
                }
            },
            "map": {
                "desc": "Iterates through an array, setting the current element to a local variable `i`. If `varName` is specified, sets that variable instead.\n\nReturns a new array where each element is the result of each iteration.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.map;array;{math;i;*;2}}",
                    "out": "[2;4;6;8;10]"
                }
            },
            "pop": {
                "desc": "Removes and returns the last element of the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.pop;array}\n{get;array}",
                    "out": "5\n[1;2;3;4]"
                }
            },
            "push": {
                "desc": "Pushes an element to the end of an array. Returns the modified array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.push;array;6}",
                    "out": "[1;2;3;4;5;6]"
                }
            },
            "set": {
                "desc": "Sets an element on the array at the specified `index`.",
                "example": {
                    "in": "{set;array;[1;2;3;8;5]}\n{get;array}\n{array.set;array;3;4}\n{get;array}",
                    "out": "[1;2;3;8;5]\n\n[1;2;3;4;5]"
                }
            },
            "shift": {
                "desc": "Removes and returns the first element in the array.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{array.shift;array}\n{get;array}",
                    "out": "1\n[2;3;4;5]"
                }
            },
            "slice": {
                "desc": "Returns a section of the array, including the `start` index and excluding the `end` index. If `end` is unspecified, defaults to all remaining elements.",
                "example": {
                    "in": "{set;array;[1;2;3;4;5]}\n{slice;array;3}\n{slice;array;2;4}",
                    "out": "[4;5]\n[3;4]"
                }
            },
            "sort": {
                "desc": "Sorts and returns an array, by default in ascending order.\n\nIf `function` is provided, sorting will occur based on the result of executing said function. This will set two local variables: `a` (or `varNameOne`) and `b` (or `varNameTwo`). \n\nThe function must return a number. If the number is greater than 0, `a` will be considered greater than `b`. If the number is lower than 0, `b` will be considered greater than `a`. Any non-number result will be converted to 0, where both elements are equal.",
                "example": {
                    "in": "{set;array;[2;5;1;6;3;7]}\n{sort;array}\n{sort;array;{math;b;-;a}}",
                    "out": "[1;2;3;5;6;7]\n[7;6;5;3;2;1]"
                }
            },
            "splice": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "split": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "unshift": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "channel": {
            "id": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "nsfw": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "name": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "position": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "topic": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "type": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "general": {
            "clean": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "//": {
                "desc": "Specifies an area that will be ignored from parsing",
                "example": {
                    "in": "This will be shown {//;This won't be}",
                    "out": "This will be shown"
                }
            },
            "get": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "set": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "trim": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "void": {
                "desc": "Prevents output from within the subtag. Differs from comment as things are parsed, just not displayed.",
                "example": {
                    "in": "This will be shown {void;This won't be {set;~temp;but this will be set}} {get;~temp}",
                    "out": "This will be shown  but this will be set"
                }
            }
        },
        "guild": {
            "createdat": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "channels": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "icon": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "id": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "name": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "owner": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "region": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "roles": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "logic": {
            "if": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "logic": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "math": {
            "abs": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "base": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "ceil": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "floor": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "math": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "parsefloat": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "parseint": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "randint": {
                "desc": "Returns a random integer between the provided range. `min` defaults to `0`",
                "example": {
                    "in": "One: {randint;5}, two: {randint;10;20}",
                    "out": "One: 2, two: 17"
                }
            },
            "round": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "message": {
            "id": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "role": {
            "color": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "id": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "mention": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "name": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "position": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        },
        "user": {
            "avatar": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "createdat": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "discrim": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "fullname": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "game": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "id": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "joinedat": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "mention": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "name": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "nick": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "roles": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "setnick": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            },
            "status": {
                "desc": "",
                "example": {
                    "in": "",
                    "out": ""
                }
            }
        }
    }
}
{
    "language": "Norsk",
    "header": {
        "login": "Logg inn",
        "logout": "Logg ut",
        "commands": "Kommandoer",
        "bbtag": "BBTag",
        "subtags": "SubTags",
        "dashboard": "Dashbord"
    },
    "generic": {
        "loading": "Laster",
        "collapse": "Kollaps Alle",
        "expand": "Utvid Alle",
        "search": "Filter...",
        "noresults": "Uh oh! Fant ingen resultater.",
        "resultsfound": "Treff:"
    },
    "index": {
        "desc": "blargbot er en multifunksjonell Discord bot dedikert til å levere bra kommandoer og tjenester, i tillegg til chatlogs og et grundig egendefinert kommando system.",
        "commands": {
            "title": "Kommandoer",
            "desc": "blargbot er utstyrt med en haug av kommandoer, som alle er dokumentert og kategorisert for å gjøre det lettere for deg."
        },
        "bbtag": {
            "title": "BBTag",
            "desc": "blargbot bruker et sofistikert tag system kalt BBTag, som du kan bruke til å lage egne avanserte kommandoer."
        },
        "customization": {
            "title": "Tilpasning",
            "desc": "Vi er klar over at ikke alle servere er like, så blargbot har omfattende tilpasning. Du kan kontrollere nøyaktig hvilke roller som kan bruke hvilke kommandoer, sette egendefinerte prefikser og velge språket!"
        },
        "moderation": {
            "title": "Moderasjon",
            "desc": "Trenger du noen til å overvåke chatten din? blargbot er utstyrt med mange moderasjonsverktøy fra grunnleggende ting som å utestenge eller dempe en bruker, til mer avanserte ting som chatlogging eller automatisk sensur."
        },
        "opensource": {
            "title": "Open-Source",
            "desc": "Sharing is caring! blargbot er helt open-sorce under GNU AGPLv3 lisensen. Du er velkommen til å ta en titt og lære deg hvordan alt funker. Om du bruker noe av koden min i ditt eget prosjekt, er du forpliktet til å henvise til meg. Se lisensen for fler detaljer."
        },
        "suggestions": {
            "title": "Åpen For Forslag",
            "desc": "Har du et forslag til botten? Jeg vil gjerne høre det! Funnet en bug? Jeg vil gjerne høre det også! Du kan foreslå noe til meg ved bruk av `suggest` kommandoen, ved bli med i serveren min eller sende inn en tilbakemelding."
        }
    },
    "bbtag": {
        "main": "# BBTag\n> Må ikke forveksles med BBCode!\n\nBBTag er et mal-basert programmeringsspråk, utformet for å gi en kraftig ramme til å lage egne avanserte kommandoer.\n\n### Terminologi\n\n- En `tag` refererer til en blokk av BBTag kode, enten det er en offentlig tag eller en egendefinert kommando.\n- En `subtag` refererer til en BBTag komponent. Avanserte `tags` er bygd opp av mange `subtags`.\n- En `klasse` refererer til en gruppe av `subtags`.",
        "subtags": {
            "title": "SubTags",
            "desc": "## SubTags\n\nSubtags er de grunnleggende byggesteinene i BBTag. De utfører dynamiske funksjoner, enten det er å hente navnet til en bruker eller gjøre matte. La oss ta en titt på en subtag nå:\n```\n{math.randint;1;10}\n```\nNår koden har blitt utført, kan det returnere følgende:\n```\n6\n```\nSom du kan se, returnerer `math.randint` et tilfeldig heltall i den gitte definisjonsmengden.\n\n### Anatomi av en SubTag\n\nEn subtag er bygd opp av ulike komponenter. Et syntaksdiagram kan se ut som noe som dette:\n```\n{[class.]name[![var]]([;args]...|=<namedArgs>...}\n```\nOh wow, ok. Det var kanskje litt forvirrende, men bær med meg.\n\n#### Klasser\n\n> `[class.]name`\n\nSubtags er delt inn i grupper kalt **klasser**. Hver klasse har et bestemt formål. For eksempel inneholder `math`-klassen subtags som omhandler tall. På samme måte vil `user`-klassen innholde subtags som gir informasjon om en bruker. Klasser gjør det mulig å organisere subtags i et system.\n\nNår du bruker en subtag, er den foretrukne bruken `{class.name}`. Dette forbedrer lesbarheten, men å eksplisitt skrive klassen er helt valgfritt. BBTag vet at `{math.randint}` og `{randint}` er den samme subtag-en. Dette kalles **implisitt klassifisering**. Unntaket til dette er subtags i den `generelle` klassen som burde brukes *uten* en eksplisitt klasse.\n\nMen du må være forsiktig med implisitt klassifisering! Noen ganger kan klasser ha subtags med de samme navnene. For eksempel `{user.id}` og `{channel.id}` begge har subtags med navnet `id`. Om du prøver å bruke implisitt klassifisering med en subtag som eksisterer i flere klasser vil det returnere en error!\n\n#### Dirigering\n\n> `[![var]]`\n\nDirigering er en funksjon som gjør det mulig å omdirigere outputtet av en subtag, enten til en variabel eller inn i et tomrom. Dette kan hjelpe deg med å rydde opp i koden din.\n\nFor eksempel, om du for en eller annen grunn ikke ønsker et output, kan du legge et `!` etter et subtags navn for å dempe den. De neste linjene er ekvialente:\n```\n{void;{math.randint;1;10}}\n{math.randint!;1;10}\n```\nOm du ønsker å lagre en subtags output til en variabel, kan du legge til `!variabelNavn` etter en subtags navn. De neste linjene er ekvialente:\n```\n{set;randomInteger;{math.randint;1;10}}\n{math.randint!randomInteger;1;10}\n```\nÅ dirigere et output direkte er litt raskere å utføre enn å bruke full syntaks.\n\n#### Argumenter\n\n> `[;args]...`\n\nDu kan putte argumenter inn i subtags og seperere de med semikolon `;`. Argumenter er forskjellig fra subtag til subtag, og dokumentasjonen på disse kan finnes på subtag siden.\n\n##### Navngitte Argumenter\n\n> `=<namedArgs>...`\n\nVanligvis er rekkefølgen på argumentene veldig viktig, men ikke om du bruker navngitte argumenter. Dette gjøres ved å bruke `=` i steden for et semikolon og deretter spesifisere key-value argumenter i formatet `{*key;value}`.\n\nFor eksempel er bruken av `{math.randint}` dette: `{math.randint;min;max}`. Navnene til argumentene er `min` og `max`. De neste linjene er ekvialente:\n```\n{math.randint;1;10}\n{math.randint=\n    {*min;1}\n    {*max;10}\n}\n```\nDu kan ikke bruke både navngitte argumenter og rangerte argumenter i samme subtag."
        },
        "variables": {
            "title": "Variabler",
            "desc": "## Variabler\n\nBBTag har flere typer variabler, hver med sitt omfang. Disse variablene kan brukes til en rekke operasjoner og funksjoner.\n\n### Navn\n\nEt variabelnavn består av to deler: en 'prefiks' og et 'navn'. Her er et syntaksdiagram:\n\n> `[prefix]name`\n\nLett, ikke sant?\n\n### Omfang\n\nMed **omfang** mener vi hvor en variabels data blir lagret, hvor lenge den er lagret og hvem som har tilgang til den. Å vite hvilket omfang man skal bruke er til stor hjelp når man skal lage en tag!\n\nEn måte å se på omfang på er hvor de er *lagret*. For eksempel er lokale variabler lagret i koden selv, mens forfatter variabler er lagret hos brukeren som lagde koden.\n\nLa oss gå gjennom alle de forskjellige omfangene, i rekkefølge fra minst til størst.\n\n### **Midlertidig** Omfang\n> Ingen prefiks\n\nMidlertidige variabler er de mest grunnleggende og brukte variabeltypen, siden de har det minste omfanget. Disse variablene er *aldri lagret i databasen* og opphører å eksistere når koden er ferdig utført. Derfor er de også de raskeste.\n\nBruk midlertidige variabler for ting som ikke trenger å være vedvarende mellom brukere.\n\n### **Lokalt** Omfang\n> Prefix: `~`\n\nLokale variabler kan kun brukes av koden som opprettet dem. De utføres nesten identisk til midlertidige variabler, bortsett fra at de beholdes mellom brukere.\n\nLokale variabler er lagret direkte til koden selv.\n\n#### **Server** Omfang\n> Prefix: `_`\n\nServer variabler kan bare brukes i serveren som koden blir utført i. De er mest egnet for egendefinerte kommandoer, siden alle de egendefinerte kommandoene i en server deler det samme omfanget av variabler uavhengig av forfatter.\n\nDet burde legges merke til at offentlige tags og egendefinerte kommandoer *ikke* deler samme server omfang, slik at tilfeldige tags ikke kan manipulere data i egendefinerte kommandoer.\n\nServer variabler lagres til serveren som koden ble utført på.\n\n### **Forfatter** Omfang\n> Prefix: `@`\n\nForfatter variabler kan bare nås fra andre tags som deler samme forfatter. De er mest egnet for offentlige tags. Dette betyr i praksis at du har et personlig variabel omfang som du alene kan bruke.\n\nForfatter variabler lagres til brukeren som opprettet koden.\n\n### **Delt** Omfang\n**MERK**: Ikke lagt til ennå.\n> Prefix: `&<name>&`\n\nDelte variabler er mer kompliserte. De opererer basert på dynamiske variabel omfang, som er tilordnet spesifikke klynger av tags. Hensikten med delte variabler er for flere brukere å kunne samarbeide på tvers av tags ved at de deler de samme variablene.\n\nDen tenkte bruken er som følger:\n1. Flere brukere oppretter ulike tags\n2. En av brukerne oppretter en klynge med et bestemt navn (f.eks. `test`)\n3. Denne brukeren legger deretter hver av de opprettede tag-ene til i klyngen\n4. Hver tag har da tilgang til klyngens variabel omfang ved hjelp av klyngenavnet som en prefiks (f.eks. `&test&`)\n\nSå, i dette eksemplet, vil den delte variabelen `apple` være tilgjengelig med det fulle navnet `&test&apple`."
        },
        "arrays": {
            "title": "Arrays",
            "desc": ""
        }
    },
    "subtags": {
        "components": {
            "argument": "",
            "named": "",
            "unnamed": "",
            "array": "",
            "staff": "",
            "noimplicit": ""
        },
        "referdocs": ""
    },
    "commands": {
        "title": "",
        "desc": "",
        "components": {
            "usage": "",
            "flags": "",
            "aliases": "",
            "subcommands": ""
        }
    },
    "dashboard": {
        "userheader": "",
        "guildheader": "",
        "notauthed": "",
        "user": {
            "dmerrors": ""
        }
    }
}